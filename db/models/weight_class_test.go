// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testWeightClasses(t *testing.T) {
	t.Parallel()

	query := WeightClasses(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testWeightClassesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = weightClass.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := WeightClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWeightClassesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = WeightClasses(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := WeightClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWeightClassesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := WeightClassSlice{weightClass}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := WeightClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testWeightClassesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := WeightClassExists(tx, weightClass.ID)
	if err != nil {
		t.Errorf("Unable to check if WeightClass exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WeightClassExistsG to return true, but got false.")
	}
}
func testWeightClassesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	weightClassFound, err := FindWeightClass(tx, weightClass.ID)
	if err != nil {
		t.Error(err)
	}

	if weightClassFound == nil {
		t.Error("want a record, got nil")
	}
}
func testWeightClassesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = WeightClasses(tx).Bind(weightClass); err != nil {
		t.Error(err)
	}
}

func testWeightClassesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := WeightClasses(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWeightClassesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClassOne := &WeightClass{}
	weightClassTwo := &WeightClass{}
	if err = randomize.Struct(seed, weightClassOne, weightClassDBTypes, false, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}
	if err = randomize.Struct(seed, weightClassTwo, weightClassDBTypes, false, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClassOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = weightClassTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := WeightClasses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWeightClassesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	weightClassOne := &WeightClass{}
	weightClassTwo := &WeightClass{}
	if err = randomize.Struct(seed, weightClassOne, weightClassDBTypes, false, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}
	if err = randomize.Struct(seed, weightClassTwo, weightClassDBTypes, false, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClassOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = weightClassTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WeightClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func weightClassBeforeInsertHook(e boil.Executor, o *WeightClass) error {
	*o = WeightClass{}
	return nil
}

func weightClassAfterInsertHook(e boil.Executor, o *WeightClass) error {
	*o = WeightClass{}
	return nil
}

func weightClassAfterSelectHook(e boil.Executor, o *WeightClass) error {
	*o = WeightClass{}
	return nil
}

func weightClassBeforeUpdateHook(e boil.Executor, o *WeightClass) error {
	*o = WeightClass{}
	return nil
}

func weightClassAfterUpdateHook(e boil.Executor, o *WeightClass) error {
	*o = WeightClass{}
	return nil
}

func weightClassBeforeDeleteHook(e boil.Executor, o *WeightClass) error {
	*o = WeightClass{}
	return nil
}

func weightClassAfterDeleteHook(e boil.Executor, o *WeightClass) error {
	*o = WeightClass{}
	return nil
}

func weightClassBeforeUpsertHook(e boil.Executor, o *WeightClass) error {
	*o = WeightClass{}
	return nil
}

func weightClassAfterUpsertHook(e boil.Executor, o *WeightClass) error {
	*o = WeightClass{}
	return nil
}

func testWeightClassesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &WeightClass{}
	o := &WeightClass{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, weightClassDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WeightClass object: %s", err)
	}

	AddWeightClassHook(boil.BeforeInsertHook, weightClassBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	weightClassBeforeInsertHooks = []WeightClassHook{}

	AddWeightClassHook(boil.AfterInsertHook, weightClassAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	weightClassAfterInsertHooks = []WeightClassHook{}

	AddWeightClassHook(boil.AfterSelectHook, weightClassAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	weightClassAfterSelectHooks = []WeightClassHook{}

	AddWeightClassHook(boil.BeforeUpdateHook, weightClassBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	weightClassBeforeUpdateHooks = []WeightClassHook{}

	AddWeightClassHook(boil.AfterUpdateHook, weightClassAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	weightClassAfterUpdateHooks = []WeightClassHook{}

	AddWeightClassHook(boil.BeforeDeleteHook, weightClassBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	weightClassBeforeDeleteHooks = []WeightClassHook{}

	AddWeightClassHook(boil.AfterDeleteHook, weightClassAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	weightClassAfterDeleteHooks = []WeightClassHook{}

	AddWeightClassHook(boil.BeforeUpsertHook, weightClassBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	weightClassBeforeUpsertHooks = []WeightClassHook{}

	AddWeightClassHook(boil.AfterUpsertHook, weightClassAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	weightClassAfterUpsertHooks = []WeightClassHook{}
}
func testWeightClassesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WeightClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWeightClassesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx, weightClassColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := WeightClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWeightClassToManyProducts(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a WeightClass
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, productDBTypes, false, productColumnsWithDefault...)
	randomize.Struct(seed, &c, productDBTypes, false, productColumnsWithDefault...)

	b.WeightClassID = a.ID
	c.WeightClassID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	product, err := a.Products(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range product {
		if v.WeightClassID == b.WeightClassID {
			bFound = true
		}
		if v.WeightClassID == c.WeightClassID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := WeightClassSlice{&a}
	if err = a.L.LoadProducts(tx, false, (*[]*WeightClass)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Products = nil
	if err = a.L.LoadProducts(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", product)
	}
}

func testWeightClassToManyAddOpProducts(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a WeightClass
	var b, c, d, e Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, weightClassDBTypes, false, strmangle.SetComplement(weightClassPrimaryKeyColumns, weightClassColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Product{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Product{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProducts(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.WeightClassID {
			t.Error("foreign key was wrong value", a.ID, first.WeightClassID)
		}
		if a.ID != second.WeightClassID {
			t.Error("foreign key was wrong value", a.ID, second.WeightClassID)
		}

		if first.R.WeightClass != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.WeightClass != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Products[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Products[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Products(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testWeightClassesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = weightClass.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testWeightClassesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := WeightClassSlice{weightClass}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testWeightClassesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := WeightClasses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	weightClassDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `Unit`: `varchar`, `Value`: `decimal`}
	_                  = bytes.MinRead
)

func testWeightClassesUpdate(t *testing.T) {
	t.Parallel()

	if len(weightClassColumns) == len(weightClassPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WeightClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	if err = weightClass.Update(tx); err != nil {
		t.Error(err)
	}
}

func testWeightClassesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(weightClassColumns) == len(weightClassPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	weightClass := &WeightClass{}
	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := WeightClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, weightClass, weightClassDBTypes, true, weightClassPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(weightClassColumns, weightClassPrimaryKeyColumns) {
		fields = weightClassColumns
	} else {
		fields = strmangle.SetComplement(
			weightClassColumns,
			weightClassPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(weightClass))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := WeightClassSlice{weightClass}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testWeightClassesUpsert(t *testing.T) {
	t.Parallel()

	if len(weightClassColumns) == len(weightClassPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	weightClass := WeightClass{}
	if err = randomize.Struct(seed, &weightClass, weightClassDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = weightClass.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert WeightClass: %s", err)
	}

	count, err := WeightClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &weightClass, weightClassDBTypes, false, weightClassPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WeightClass struct: %s", err)
	}

	if err = weightClass.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert WeightClass: %s", err)
	}

	count, err = WeightClasses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
