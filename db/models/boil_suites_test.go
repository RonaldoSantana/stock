// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Addresses", testAddresses)
	t.Run("Countries", testCountries)
	t.Run("GeoZones", testGeoZones)
	t.Run("GeoZoneMatrices", testGeoZoneMatrices)
	t.Run("LengthClasses", testLengthClasses)
	t.Run("Products", testProducts)
	t.Run("Regions", testRegions)
	t.Run("Suppliers", testSuppliers)
	t.Run("TaxClasses", testTaxClasses)
	t.Run("TaxRates", testTaxRates)
	t.Run("WeightClasses", testWeightClasses)
}

func TestDelete(t *testing.T) {
	t.Run("Addresses", testAddressesDelete)
	t.Run("Countries", testCountriesDelete)
	t.Run("GeoZones", testGeoZonesDelete)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesDelete)
	t.Run("LengthClasses", testLengthClassesDelete)
	t.Run("Products", testProductsDelete)
	t.Run("Regions", testRegionsDelete)
	t.Run("Suppliers", testSuppliersDelete)
	t.Run("TaxClasses", testTaxClassesDelete)
	t.Run("TaxRates", testTaxRatesDelete)
	t.Run("WeightClasses", testWeightClassesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Addresses", testAddressesQueryDeleteAll)
	t.Run("Countries", testCountriesQueryDeleteAll)
	t.Run("GeoZones", testGeoZonesQueryDeleteAll)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesQueryDeleteAll)
	t.Run("LengthClasses", testLengthClassesQueryDeleteAll)
	t.Run("Products", testProductsQueryDeleteAll)
	t.Run("Regions", testRegionsQueryDeleteAll)
	t.Run("Suppliers", testSuppliersQueryDeleteAll)
	t.Run("TaxClasses", testTaxClassesQueryDeleteAll)
	t.Run("TaxRates", testTaxRatesQueryDeleteAll)
	t.Run("WeightClasses", testWeightClassesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Addresses", testAddressesSliceDeleteAll)
	t.Run("Countries", testCountriesSliceDeleteAll)
	t.Run("GeoZones", testGeoZonesSliceDeleteAll)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesSliceDeleteAll)
	t.Run("LengthClasses", testLengthClassesSliceDeleteAll)
	t.Run("Products", testProductsSliceDeleteAll)
	t.Run("Regions", testRegionsSliceDeleteAll)
	t.Run("Suppliers", testSuppliersSliceDeleteAll)
	t.Run("TaxClasses", testTaxClassesSliceDeleteAll)
	t.Run("TaxRates", testTaxRatesSliceDeleteAll)
	t.Run("WeightClasses", testWeightClassesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Addresses", testAddressesExists)
	t.Run("Countries", testCountriesExists)
	t.Run("GeoZones", testGeoZonesExists)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesExists)
	t.Run("LengthClasses", testLengthClassesExists)
	t.Run("Products", testProductsExists)
	t.Run("Regions", testRegionsExists)
	t.Run("Suppliers", testSuppliersExists)
	t.Run("TaxClasses", testTaxClassesExists)
	t.Run("TaxRates", testTaxRatesExists)
	t.Run("WeightClasses", testWeightClassesExists)
}

func TestFind(t *testing.T) {
	t.Run("Addresses", testAddressesFind)
	t.Run("Countries", testCountriesFind)
	t.Run("GeoZones", testGeoZonesFind)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesFind)
	t.Run("LengthClasses", testLengthClassesFind)
	t.Run("Products", testProductsFind)
	t.Run("Regions", testRegionsFind)
	t.Run("Suppliers", testSuppliersFind)
	t.Run("TaxClasses", testTaxClassesFind)
	t.Run("TaxRates", testTaxRatesFind)
	t.Run("WeightClasses", testWeightClassesFind)
}

func TestBind(t *testing.T) {
	t.Run("Addresses", testAddressesBind)
	t.Run("Countries", testCountriesBind)
	t.Run("GeoZones", testGeoZonesBind)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesBind)
	t.Run("LengthClasses", testLengthClassesBind)
	t.Run("Products", testProductsBind)
	t.Run("Regions", testRegionsBind)
	t.Run("Suppliers", testSuppliersBind)
	t.Run("TaxClasses", testTaxClassesBind)
	t.Run("TaxRates", testTaxRatesBind)
	t.Run("WeightClasses", testWeightClassesBind)
}

func TestOne(t *testing.T) {
	t.Run("Addresses", testAddressesOne)
	t.Run("Countries", testCountriesOne)
	t.Run("GeoZones", testGeoZonesOne)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesOne)
	t.Run("LengthClasses", testLengthClassesOne)
	t.Run("Products", testProductsOne)
	t.Run("Regions", testRegionsOne)
	t.Run("Suppliers", testSuppliersOne)
	t.Run("TaxClasses", testTaxClassesOne)
	t.Run("TaxRates", testTaxRatesOne)
	t.Run("WeightClasses", testWeightClassesOne)
}

func TestAll(t *testing.T) {
	t.Run("Addresses", testAddressesAll)
	t.Run("Countries", testCountriesAll)
	t.Run("GeoZones", testGeoZonesAll)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesAll)
	t.Run("LengthClasses", testLengthClassesAll)
	t.Run("Products", testProductsAll)
	t.Run("Regions", testRegionsAll)
	t.Run("Suppliers", testSuppliersAll)
	t.Run("TaxClasses", testTaxClassesAll)
	t.Run("TaxRates", testTaxRatesAll)
	t.Run("WeightClasses", testWeightClassesAll)
}

func TestCount(t *testing.T) {
	t.Run("Addresses", testAddressesCount)
	t.Run("Countries", testCountriesCount)
	t.Run("GeoZones", testGeoZonesCount)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesCount)
	t.Run("LengthClasses", testLengthClassesCount)
	t.Run("Products", testProductsCount)
	t.Run("Regions", testRegionsCount)
	t.Run("Suppliers", testSuppliersCount)
	t.Run("TaxClasses", testTaxClassesCount)
	t.Run("TaxRates", testTaxRatesCount)
	t.Run("WeightClasses", testWeightClassesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Addresses", testAddressesHooks)
	t.Run("Countries", testCountriesHooks)
	t.Run("GeoZones", testGeoZonesHooks)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesHooks)
	t.Run("LengthClasses", testLengthClassesHooks)
	t.Run("Products", testProductsHooks)
	t.Run("Regions", testRegionsHooks)
	t.Run("Suppliers", testSuppliersHooks)
	t.Run("TaxClasses", testTaxClassesHooks)
	t.Run("TaxRates", testTaxRatesHooks)
	t.Run("WeightClasses", testWeightClassesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Addresses", testAddressesInsert)
	t.Run("Addresses", testAddressesInsertWhitelist)
	t.Run("Countries", testCountriesInsert)
	t.Run("Countries", testCountriesInsertWhitelist)
	t.Run("GeoZones", testGeoZonesInsert)
	t.Run("GeoZones", testGeoZonesInsertWhitelist)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesInsert)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesInsertWhitelist)
	t.Run("LengthClasses", testLengthClassesInsert)
	t.Run("LengthClasses", testLengthClassesInsertWhitelist)
	t.Run("Products", testProductsInsert)
	t.Run("Products", testProductsInsertWhitelist)
	t.Run("Regions", testRegionsInsert)
	t.Run("Regions", testRegionsInsertWhitelist)
	t.Run("Suppliers", testSuppliersInsert)
	t.Run("Suppliers", testSuppliersInsertWhitelist)
	t.Run("TaxClasses", testTaxClassesInsert)
	t.Run("TaxClasses", testTaxClassesInsertWhitelist)
	t.Run("TaxRates", testTaxRatesInsert)
	t.Run("TaxRates", testTaxRatesInsertWhitelist)
	t.Run("WeightClasses", testWeightClassesInsert)
	t.Run("WeightClasses", testWeightClassesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AddressToCountryUsingCountry", testAddressToOneCountryUsingCountry)
	t.Run("AddressToRegionUsingRegion", testAddressToOneRegionUsingRegion)
	t.Run("AddressToSupplierUsingSupplier", testAddressToOneSupplierUsingSupplier)
	t.Run("GeoZoneMatrixToCountryUsingCountry", testGeoZoneMatrixToOneCountryUsingCountry)
	t.Run("GeoZoneMatrixToGeoZoneUsingGeoZone", testGeoZoneMatrixToOneGeoZoneUsingGeoZone)
	t.Run("GeoZoneMatrixToRegionUsingRegion", testGeoZoneMatrixToOneRegionUsingRegion)
	t.Run("ProductToLengthClassUsingLengthClass", testProductToOneLengthClassUsingLengthClass)
	t.Run("ProductToSupplierUsingSupplier", testProductToOneSupplierUsingSupplier)
	t.Run("ProductToTaxClassUsingTaxClass", testProductToOneTaxClassUsingTaxClass)
	t.Run("ProductToWeightClassUsingWeightClass", testProductToOneWeightClassUsingWeightClass)
	t.Run("RegionToCountryUsingCountry", testRegionToOneCountryUsingCountry)
	t.Run("TaxRateToGeoZoneUsingGeoZone", testTaxRateToOneGeoZoneUsingGeoZone)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("CountryToAddresses", testCountryToManyAddresses)
	t.Run("CountryToGeoZoneMatrices", testCountryToManyGeoZoneMatrices)
	t.Run("CountryToRegions", testCountryToManyRegions)
	t.Run("GeoZoneToGeoZoneMatrices", testGeoZoneToManyGeoZoneMatrices)
	t.Run("GeoZoneToTaxRates", testGeoZoneToManyTaxRates)
	t.Run("LengthClassToProducts", testLengthClassToManyProducts)
	t.Run("RegionToAddresses", testRegionToManyAddresses)
	t.Run("RegionToGeoZoneMatrices", testRegionToManyGeoZoneMatrices)
	t.Run("SupplierToAddresses", testSupplierToManyAddresses)
	t.Run("SupplierToProducts", testSupplierToManyProducts)
	t.Run("TaxClassToProducts", testTaxClassToManyProducts)
	t.Run("WeightClassToProducts", testWeightClassToManyProducts)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AddressToCountryUsingCountry", testAddressToOneSetOpCountryUsingCountry)
	t.Run("AddressToRegionUsingRegion", testAddressToOneSetOpRegionUsingRegion)
	t.Run("AddressToSupplierUsingSupplier", testAddressToOneSetOpSupplierUsingSupplier)
	t.Run("GeoZoneMatrixToCountryUsingCountry", testGeoZoneMatrixToOneSetOpCountryUsingCountry)
	t.Run("GeoZoneMatrixToGeoZoneUsingGeoZone", testGeoZoneMatrixToOneSetOpGeoZoneUsingGeoZone)
	t.Run("GeoZoneMatrixToRegionUsingRegion", testGeoZoneMatrixToOneSetOpRegionUsingRegion)
	t.Run("ProductToLengthClassUsingLengthClass", testProductToOneSetOpLengthClassUsingLengthClass)
	t.Run("ProductToSupplierUsingSupplier", testProductToOneSetOpSupplierUsingSupplier)
	t.Run("ProductToTaxClassUsingTaxClass", testProductToOneSetOpTaxClassUsingTaxClass)
	t.Run("ProductToWeightClassUsingWeightClass", testProductToOneSetOpWeightClassUsingWeightClass)
	t.Run("RegionToCountryUsingCountry", testRegionToOneSetOpCountryUsingCountry)
	t.Run("TaxRateToGeoZoneUsingGeoZone", testTaxRateToOneSetOpGeoZoneUsingGeoZone)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("AddressToCountryUsingCountry", testAddressToOneRemoveOpCountryUsingCountry)
	t.Run("AddressToRegionUsingRegion", testAddressToOneRemoveOpRegionUsingRegion)
	t.Run("GeoZoneMatrixToRegionUsingRegion", testGeoZoneMatrixToOneRemoveOpRegionUsingRegion)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("CountryToAddresses", testCountryToManyAddOpAddresses)
	t.Run("CountryToGeoZoneMatrices", testCountryToManyAddOpGeoZoneMatrices)
	t.Run("CountryToRegions", testCountryToManyAddOpRegions)
	t.Run("GeoZoneToGeoZoneMatrices", testGeoZoneToManyAddOpGeoZoneMatrices)
	t.Run("GeoZoneToTaxRates", testGeoZoneToManyAddOpTaxRates)
	t.Run("LengthClassToProducts", testLengthClassToManyAddOpProducts)
	t.Run("RegionToAddresses", testRegionToManyAddOpAddresses)
	t.Run("RegionToGeoZoneMatrices", testRegionToManyAddOpGeoZoneMatrices)
	t.Run("SupplierToAddresses", testSupplierToManyAddOpAddresses)
	t.Run("SupplierToProducts", testSupplierToManyAddOpProducts)
	t.Run("TaxClassToProducts", testTaxClassToManyAddOpProducts)
	t.Run("WeightClassToProducts", testWeightClassToManyAddOpProducts)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CountryToAddresses", testCountryToManySetOpAddresses)
	t.Run("RegionToAddresses", testRegionToManySetOpAddresses)
	t.Run("RegionToGeoZoneMatrices", testRegionToManySetOpGeoZoneMatrices)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CountryToAddresses", testCountryToManyRemoveOpAddresses)
	t.Run("RegionToAddresses", testRegionToManyRemoveOpAddresses)
	t.Run("RegionToGeoZoneMatrices", testRegionToManyRemoveOpGeoZoneMatrices)
}

func TestReload(t *testing.T) {
	t.Run("Addresses", testAddressesReload)
	t.Run("Countries", testCountriesReload)
	t.Run("GeoZones", testGeoZonesReload)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesReload)
	t.Run("LengthClasses", testLengthClassesReload)
	t.Run("Products", testProductsReload)
	t.Run("Regions", testRegionsReload)
	t.Run("Suppliers", testSuppliersReload)
	t.Run("TaxClasses", testTaxClassesReload)
	t.Run("TaxRates", testTaxRatesReload)
	t.Run("WeightClasses", testWeightClassesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Addresses", testAddressesReloadAll)
	t.Run("Countries", testCountriesReloadAll)
	t.Run("GeoZones", testGeoZonesReloadAll)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesReloadAll)
	t.Run("LengthClasses", testLengthClassesReloadAll)
	t.Run("Products", testProductsReloadAll)
	t.Run("Regions", testRegionsReloadAll)
	t.Run("Suppliers", testSuppliersReloadAll)
	t.Run("TaxClasses", testTaxClassesReloadAll)
	t.Run("TaxRates", testTaxRatesReloadAll)
	t.Run("WeightClasses", testWeightClassesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Addresses", testAddressesSelect)
	t.Run("Countries", testCountriesSelect)
	t.Run("GeoZones", testGeoZonesSelect)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesSelect)
	t.Run("LengthClasses", testLengthClassesSelect)
	t.Run("Products", testProductsSelect)
	t.Run("Regions", testRegionsSelect)
	t.Run("Suppliers", testSuppliersSelect)
	t.Run("TaxClasses", testTaxClassesSelect)
	t.Run("TaxRates", testTaxRatesSelect)
	t.Run("WeightClasses", testWeightClassesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Addresses", testAddressesUpdate)
	t.Run("Countries", testCountriesUpdate)
	t.Run("GeoZones", testGeoZonesUpdate)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesUpdate)
	t.Run("LengthClasses", testLengthClassesUpdate)
	t.Run("Products", testProductsUpdate)
	t.Run("Regions", testRegionsUpdate)
	t.Run("Suppliers", testSuppliersUpdate)
	t.Run("TaxClasses", testTaxClassesUpdate)
	t.Run("TaxRates", testTaxRatesUpdate)
	t.Run("WeightClasses", testWeightClassesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Addresses", testAddressesSliceUpdateAll)
	t.Run("Countries", testCountriesSliceUpdateAll)
	t.Run("GeoZones", testGeoZonesSliceUpdateAll)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesSliceUpdateAll)
	t.Run("LengthClasses", testLengthClassesSliceUpdateAll)
	t.Run("Products", testProductsSliceUpdateAll)
	t.Run("Regions", testRegionsSliceUpdateAll)
	t.Run("Suppliers", testSuppliersSliceUpdateAll)
	t.Run("TaxClasses", testTaxClassesSliceUpdateAll)
	t.Run("TaxRates", testTaxRatesSliceUpdateAll)
	t.Run("WeightClasses", testWeightClassesSliceUpdateAll)
}

func TestUpsert(t *testing.T) {
	t.Run("Addresses", testAddressesUpsert)
	t.Run("Countries", testCountriesUpsert)
	t.Run("GeoZones", testGeoZonesUpsert)
	t.Run("GeoZoneMatrices", testGeoZoneMatricesUpsert)
	t.Run("LengthClasses", testLengthClassesUpsert)
	t.Run("Products", testProductsUpsert)
	t.Run("Regions", testRegionsUpsert)
	t.Run("Suppliers", testSuppliersUpsert)
	t.Run("TaxClasses", testTaxClassesUpsert)
	t.Run("TaxRates", testTaxRatesUpsert)
	t.Run("WeightClasses", testWeightClassesUpsert)
}
