// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testSuppliers(t *testing.T) {
	t.Parallel()

	query := Suppliers(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testSuppliersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = supplier.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Suppliers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuppliersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Suppliers(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Suppliers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSuppliersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SupplierSlice{supplier}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Suppliers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testSuppliersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SupplierExists(tx, supplier.ID)
	if err != nil {
		t.Errorf("Unable to check if Supplier exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SupplierExistsG to return true, but got false.")
	}
}
func testSuppliersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	supplierFound, err := FindSupplier(tx, supplier.ID)
	if err != nil {
		t.Error(err)
	}

	if supplierFound == nil {
		t.Error("want a record, got nil")
	}
}
func testSuppliersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Suppliers(tx).Bind(supplier); err != nil {
		t.Error(err)
	}
}

func testSuppliersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Suppliers(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSuppliersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplierOne := &Supplier{}
	supplierTwo := &Supplier{}
	if err = randomize.Struct(seed, supplierOne, supplierDBTypes, false, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}
	if err = randomize.Struct(seed, supplierTwo, supplierDBTypes, false, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplierOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = supplierTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Suppliers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSuppliersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	supplierOne := &Supplier{}
	supplierTwo := &Supplier{}
	if err = randomize.Struct(seed, supplierOne, supplierDBTypes, false, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}
	if err = randomize.Struct(seed, supplierTwo, supplierDBTypes, false, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplierOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = supplierTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Suppliers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func supplierBeforeInsertHook(e boil.Executor, o *Supplier) error {
	*o = Supplier{}
	return nil
}

func supplierAfterInsertHook(e boil.Executor, o *Supplier) error {
	*o = Supplier{}
	return nil
}

func supplierAfterSelectHook(e boil.Executor, o *Supplier) error {
	*o = Supplier{}
	return nil
}

func supplierBeforeUpdateHook(e boil.Executor, o *Supplier) error {
	*o = Supplier{}
	return nil
}

func supplierAfterUpdateHook(e boil.Executor, o *Supplier) error {
	*o = Supplier{}
	return nil
}

func supplierBeforeDeleteHook(e boil.Executor, o *Supplier) error {
	*o = Supplier{}
	return nil
}

func supplierAfterDeleteHook(e boil.Executor, o *Supplier) error {
	*o = Supplier{}
	return nil
}

func supplierBeforeUpsertHook(e boil.Executor, o *Supplier) error {
	*o = Supplier{}
	return nil
}

func supplierAfterUpsertHook(e boil.Executor, o *Supplier) error {
	*o = Supplier{}
	return nil
}

func testSuppliersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Supplier{}
	o := &Supplier{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, supplierDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Supplier object: %s", err)
	}

	AddSupplierHook(boil.BeforeInsertHook, supplierBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	supplierBeforeInsertHooks = []SupplierHook{}

	AddSupplierHook(boil.AfterInsertHook, supplierAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	supplierAfterInsertHooks = []SupplierHook{}

	AddSupplierHook(boil.AfterSelectHook, supplierAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	supplierAfterSelectHooks = []SupplierHook{}

	AddSupplierHook(boil.BeforeUpdateHook, supplierBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	supplierBeforeUpdateHooks = []SupplierHook{}

	AddSupplierHook(boil.AfterUpdateHook, supplierAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	supplierAfterUpdateHooks = []SupplierHook{}

	AddSupplierHook(boil.BeforeDeleteHook, supplierBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	supplierBeforeDeleteHooks = []SupplierHook{}

	AddSupplierHook(boil.AfterDeleteHook, supplierAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	supplierAfterDeleteHooks = []SupplierHook{}

	AddSupplierHook(boil.BeforeUpsertHook, supplierBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	supplierBeforeUpsertHooks = []SupplierHook{}

	AddSupplierHook(boil.AfterUpsertHook, supplierAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	supplierAfterUpsertHooks = []SupplierHook{}
}
func testSuppliersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Suppliers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSuppliersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx, supplierColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Suppliers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSupplierToManyAddresses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Supplier
	var b, c Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, addressDBTypes, false, addressColumnsWithDefault...)
	randomize.Struct(seed, &c, addressDBTypes, false, addressColumnsWithDefault...)

	b.SupplierID = a.ID
	c.SupplierID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	address, err := a.Addresses(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range address {
		if v.SupplierID == b.SupplierID {
			bFound = true
		}
		if v.SupplierID == c.SupplierID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SupplierSlice{&a}
	if err = a.L.LoadAddresses(tx, false, (*[]*Supplier)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Addresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Addresses = nil
	if err = a.L.LoadAddresses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Addresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", address)
	}
}

func testSupplierToManyProducts(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Supplier
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, productDBTypes, false, productColumnsWithDefault...)
	randomize.Struct(seed, &c, productDBTypes, false, productColumnsWithDefault...)

	b.SupplierID = a.ID
	c.SupplierID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	product, err := a.Products(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range product {
		if v.SupplierID == b.SupplierID {
			bFound = true
		}
		if v.SupplierID == c.SupplierID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SupplierSlice{&a}
	if err = a.L.LoadProducts(tx, false, (*[]*Supplier)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Products = nil
	if err = a.L.LoadProducts(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Products); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", product)
	}
}

func testSupplierToManyAddOpAddresses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Supplier
	var b, c, d, e Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Address{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Address{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAddresses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SupplierID {
			t.Error("foreign key was wrong value", a.ID, first.SupplierID)
		}
		if a.ID != second.SupplierID {
			t.Error("foreign key was wrong value", a.ID, second.SupplierID)
		}

		if first.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Addresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Addresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Addresses(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testSupplierToManyAddOpProducts(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Supplier
	var b, c, d, e Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Product{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Product{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddProducts(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SupplierID {
			t.Error("foreign key was wrong value", a.ID, first.SupplierID)
		}
		if a.ID != second.SupplierID {
			t.Error("foreign key was wrong value", a.ID, second.SupplierID)
		}

		if first.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Supplier != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Products[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Products[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Products(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSuppliersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = supplier.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSuppliersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SupplierSlice{supplier}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testSuppliersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Suppliers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	supplierDBTypes = map[string]string{`EmailAddress`: `varchar`, `ID`: `int`, `Name`: `varchar`, `PrimaryContact`: `varchar`}
	_               = bytes.MinRead
)

func testSuppliersUpdate(t *testing.T) {
	t.Parallel()

	if len(supplierColumns) == len(supplierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Suppliers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	if err = supplier.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSuppliersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(supplierColumns) == len(supplierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	supplier := &Supplier{}
	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Suppliers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, supplier, supplierDBTypes, true, supplierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(supplierColumns, supplierPrimaryKeyColumns) {
		fields = supplierColumns
	} else {
		fields = strmangle.SetComplement(
			supplierColumns,
			supplierPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(supplier))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SupplierSlice{supplier}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testSuppliersUpsert(t *testing.T) {
	t.Parallel()

	if len(supplierColumns) == len(supplierPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	supplier := Supplier{}
	if err = randomize.Struct(seed, &supplier, supplierDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = supplier.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Supplier: %s", err)
	}

	count, err := Suppliers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &supplier, supplierDBTypes, false, supplierPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	if err = supplier.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Supplier: %s", err)
	}

	count, err = Suppliers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
