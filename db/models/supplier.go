// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// Supplier is an object representing the database table.
type Supplier struct {
	ID             int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string `boil:"name" json:"name" toml:"name" yaml:"name"`
	PrimaryContact string `boil:"primary_contact" json:"primary_contact" toml:"primary_contact" yaml:"primary_contact"`
	EmailAddress   string `boil:"email_address" json:"email_address" toml:"email_address" yaml:"email_address"`

	R *supplierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L supplierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// supplierR is where relationships are stored.
type supplierR struct {
	Addresses AddressSlice
	Products  ProductSlice
}

// supplierL is where Load methods for each relationship are stored.
type supplierL struct{}

var (
	supplierColumns               = []string{"id", "name", "primary_contact", "email_address"}
	supplierColumnsWithoutDefault = []string{"name", "primary_contact", "email_address"}
	supplierColumnsWithDefault    = []string{"id"}
	supplierPrimaryKeyColumns     = []string{"id"}
)

type (
	// SupplierSlice is an alias for a slice of pointers to Supplier.
	// This should generally be used opposed to []Supplier.
	SupplierSlice []*Supplier
	// SupplierHook is the signature for custom Supplier hook methods
	SupplierHook func(boil.Executor, *Supplier) error

	supplierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	supplierType                 = reflect.TypeOf(&Supplier{})
	supplierMapping              = queries.MakeStructMapping(supplierType)
	supplierPrimaryKeyMapping, _ = queries.BindMapping(supplierType, supplierMapping, supplierPrimaryKeyColumns)
	supplierInsertCacheMut       sync.RWMutex
	supplierInsertCache          = make(map[string]insertCache)
	supplierUpdateCacheMut       sync.RWMutex
	supplierUpdateCache          = make(map[string]updateCache)
	supplierUpsertCacheMut       sync.RWMutex
	supplierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var supplierBeforeInsertHooks []SupplierHook
var supplierBeforeUpdateHooks []SupplierHook
var supplierBeforeDeleteHooks []SupplierHook
var supplierBeforeUpsertHooks []SupplierHook

var supplierAfterInsertHooks []SupplierHook
var supplierAfterSelectHooks []SupplierHook
var supplierAfterUpdateHooks []SupplierHook
var supplierAfterDeleteHooks []SupplierHook
var supplierAfterUpsertHooks []SupplierHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Supplier) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range supplierBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Supplier) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range supplierBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Supplier) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range supplierBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Supplier) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range supplierBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Supplier) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range supplierAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Supplier) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range supplierAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Supplier) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range supplierAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Supplier) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range supplierAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Supplier) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range supplierAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSupplierHook registers your hook function for all future operations.
func AddSupplierHook(hookPoint boil.HookPoint, supplierHook SupplierHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		supplierBeforeInsertHooks = append(supplierBeforeInsertHooks, supplierHook)
	case boil.BeforeUpdateHook:
		supplierBeforeUpdateHooks = append(supplierBeforeUpdateHooks, supplierHook)
	case boil.BeforeDeleteHook:
		supplierBeforeDeleteHooks = append(supplierBeforeDeleteHooks, supplierHook)
	case boil.BeforeUpsertHook:
		supplierBeforeUpsertHooks = append(supplierBeforeUpsertHooks, supplierHook)
	case boil.AfterInsertHook:
		supplierAfterInsertHooks = append(supplierAfterInsertHooks, supplierHook)
	case boil.AfterSelectHook:
		supplierAfterSelectHooks = append(supplierAfterSelectHooks, supplierHook)
	case boil.AfterUpdateHook:
		supplierAfterUpdateHooks = append(supplierAfterUpdateHooks, supplierHook)
	case boil.AfterDeleteHook:
		supplierAfterDeleteHooks = append(supplierAfterDeleteHooks, supplierHook)
	case boil.AfterUpsertHook:
		supplierAfterUpsertHooks = append(supplierAfterUpsertHooks, supplierHook)
	}
}

// OneP returns a single supplier record from the query, and panics on error.
func (q supplierQuery) OneP() *Supplier {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single supplier record from the query.
func (q supplierQuery) One() (*Supplier, error) {
	o := &Supplier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for supplier")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Supplier records from the query, and panics on error.
func (q supplierQuery) AllP() SupplierSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Supplier records from the query.
func (q supplierQuery) All() (SupplierSlice, error) {
	var o []*Supplier

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Supplier slice")
	}

	if len(supplierAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Supplier records in the query, and panics on error.
func (q supplierQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Supplier records in the query.
func (q supplierQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count supplier rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q supplierQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q supplierQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if supplier exists")
	}

	return count > 0, nil
}

// AddressesG retrieves all the address's address.
func (o *Supplier) AddressesG(mods ...qm.QueryMod) addressQuery {
	return o.Addresses(boil.GetDB(), mods...)
}

// Addresses retrieves all the address's address with an executor.
func (o *Supplier) Addresses(exec boil.Executor, mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`supplier_id`=?", o.ID),
	)

	query := Addresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`address` as `a`")
	return query
}

// ProductsG retrieves all the product's product.
func (o *Supplier) ProductsG(mods ...qm.QueryMod) productQuery {
	return o.Products(boil.GetDB(), mods...)
}

// Products retrieves all the product's product with an executor.
func (o *Supplier) Products(exec boil.Executor, mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`supplier_id`=?", o.ID),
	)

	query := Products(exec, queryMods...)
	queries.SetFrom(query.Query, "`product` as `a`")
	return query
}

// LoadAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (supplierL) LoadAddresses(e boil.Executor, singular bool, maybeSupplier interface{}) error {
	var slice []*Supplier
	var object *Supplier

	count := 1
	if singular {
		object = maybeSupplier.(*Supplier)
	} else {
		slice = *maybeSupplier.(*[]*Supplier)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &supplierR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &supplierR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `address` where `supplier_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load address")
	}
	defer results.Close()

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice address")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Addresses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.Addresses = append(local.R.Addresses, foreign)
				break
			}
		}
	}

	return nil
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (supplierL) LoadProducts(e boil.Executor, singular bool, maybeSupplier interface{}) error {
	var slice []*Supplier
	var object *Supplier

	count := 1
	if singular {
		object = maybeSupplier.(*Supplier)
	} else {
		slice = *maybeSupplier.(*[]*Supplier)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &supplierR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &supplierR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `product` where `supplier_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product")
	}
	defer results.Close()

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SupplierID {
				local.R.Products = append(local.R.Products, foreign)
				break
			}
		}
	}

	return nil
}

// AddAddressesG adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Supplier appropriately.
// Uses the global database handle.
func (o *Supplier) AddAddressesG(insert bool, related ...*Address) error {
	return o.AddAddresses(boil.GetDB(), insert, related...)
}

// AddAddressesP adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Supplier appropriately.
// Panics on error.
func (o *Supplier) AddAddressesP(exec boil.Executor, insert bool, related ...*Address) {
	if err := o.AddAddresses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAddressesGP adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Supplier appropriately.
// Uses the global database handle and panics on error.
func (o *Supplier) AddAddressesGP(insert bool, related ...*Address) {
	if err := o.AddAddresses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAddresses adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Supplier appropriately.
func (o *Supplier) AddAddresses(exec boil.Executor, insert bool, related ...*Address) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `address` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"supplier_id"}),
				strmangle.WhereClause("`", "`", 0, addressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supplierR{
			Addresses: related,
		}
	} else {
		o.R.Addresses = append(o.R.Addresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &addressR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// AddProductsG adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Supplier appropriately.
// Uses the global database handle.
func (o *Supplier) AddProductsG(insert bool, related ...*Product) error {
	return o.AddProducts(boil.GetDB(), insert, related...)
}

// AddProductsP adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Supplier appropriately.
// Panics on error.
func (o *Supplier) AddProductsP(exec boil.Executor, insert bool, related ...*Product) {
	if err := o.AddProducts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProductsGP adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Supplier appropriately.
// Uses the global database handle and panics on error.
func (o *Supplier) AddProductsGP(insert bool, related ...*Product) {
	if err := o.AddProducts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProducts adds the given related objects to the existing relationships
// of the supplier, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.Supplier appropriately.
func (o *Supplier) AddProducts(exec boil.Executor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SupplierID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"supplier_id"}),
				strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SupplierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &supplierR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				Supplier: o,
			}
		} else {
			rel.R.Supplier = o
		}
	}
	return nil
}

// SuppliersG retrieves all records.
func SuppliersG(mods ...qm.QueryMod) supplierQuery {
	return Suppliers(boil.GetDB(), mods...)
}

// Suppliers retrieves all the records using an executor.
func Suppliers(exec boil.Executor, mods ...qm.QueryMod) supplierQuery {
	mods = append(mods, qm.From("`supplier`"))
	return supplierQuery{NewQuery(exec, mods...)}
}

// FindSupplierG retrieves a single record by ID.
func FindSupplierG(id int, selectCols ...string) (*Supplier, error) {
	return FindSupplier(boil.GetDB(), id, selectCols...)
}

// FindSupplierGP retrieves a single record by ID, and panics on error.
func FindSupplierGP(id int, selectCols ...string) *Supplier {
	retobj, err := FindSupplier(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSupplier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSupplier(exec boil.Executor, id int, selectCols ...string) (*Supplier, error) {
	supplierObj := &Supplier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `supplier` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(supplierObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from supplier")
	}

	return supplierObj, nil
}

// FindSupplierP retrieves a single record by ID with an executor, and panics on error.
func FindSupplierP(exec boil.Executor, id int, selectCols ...string) *Supplier {
	retobj, err := FindSupplier(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Supplier) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Supplier) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Supplier) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Supplier) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no supplier provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(supplierColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	supplierInsertCacheMut.RLock()
	cache, cached := supplierInsertCache[key]
	supplierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			supplierColumns,
			supplierColumnsWithDefault,
			supplierColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(supplierType, supplierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `supplier` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `supplier` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `supplier` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, supplierPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into supplier")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == supplierMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for supplier")
	}

CacheNoHooks:
	if !cached {
		supplierInsertCacheMut.Lock()
		supplierInsertCache[key] = cache
		supplierInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Supplier record. See Update for
// whitelist behavior description.
func (o *Supplier) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Supplier record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Supplier) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Supplier, and panics on error.
// See Update for whitelist behavior description.
func (o *Supplier) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Supplier.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Supplier) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	supplierUpdateCacheMut.RLock()
	cache, cached := supplierUpdateCache[key]
	supplierUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			supplierColumns,
			supplierPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update supplier, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `supplier` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, supplierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, append(wl, supplierPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update supplier row")
	}

	if !cached {
		supplierUpdateCacheMut.Lock()
		supplierUpdateCache[key] = cache
		supplierUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q supplierQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q supplierQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for supplier")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SupplierSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SupplierSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SupplierSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SupplierSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `supplier` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, supplierPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in supplier slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Supplier) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Supplier) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Supplier) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Supplier) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no supplier provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(supplierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	supplierUpsertCacheMut.RLock()
	cache, cached := supplierUpsertCache[key]
	supplierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			supplierColumns,
			supplierColumnsWithDefault,
			supplierColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			supplierColumns,
			supplierPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert supplier, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "supplier", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `supplier` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(supplierType, supplierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(supplierType, supplierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for supplier")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == supplierMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for supplier")
	}

CacheNoHooks:
	if !cached {
		supplierUpsertCacheMut.Lock()
		supplierUpsertCache[key] = cache
		supplierUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Supplier record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Supplier) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Supplier record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Supplier) DeleteG() error {
	if o == nil {
		return errors.New("models: no Supplier provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Supplier record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Supplier) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Supplier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Supplier) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Supplier provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), supplierPrimaryKeyMapping)
	sql := "DELETE FROM `supplier` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from supplier")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q supplierQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q supplierQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no supplierQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from supplier")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SupplierSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SupplierSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Supplier slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SupplierSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SupplierSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Supplier slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(supplierBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `supplier` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, supplierPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from supplier slice")
	}

	if len(supplierAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Supplier) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Supplier) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Supplier) ReloadG() error {
	if o == nil {
		return errors.New("models: no Supplier provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Supplier) Reload(exec boil.Executor) error {
	ret, err := FindSupplier(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SupplierSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SupplierSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SupplierSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty SupplierSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SupplierSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	suppliers := SupplierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), supplierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `supplier`.* FROM `supplier` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, supplierPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&suppliers)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SupplierSlice")
	}

	*o = suppliers

	return nil
}

// SupplierExists checks if the Supplier row exists.
func SupplierExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `supplier` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if supplier exists")
	}

	return exists, nil
}

// SupplierExistsG checks if the Supplier row exists.
func SupplierExistsG(id int) (bool, error) {
	return SupplierExists(boil.GetDB(), id)
}

// SupplierExistsGP checks if the Supplier row exists. Panics on error.
func SupplierExistsGP(id int) bool {
	e, err := SupplierExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SupplierExistsP checks if the Supplier row exists. Panics on error.
func SupplierExistsP(exec boil.Executor, id int) bool {
	e, err := SupplierExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
