// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// Region is an object representing the database table.
type Region struct {
	ID        int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	CountryID int    `boil:"country_id" json:"country_id" toml:"country_id" yaml:"country_id"`
	Name      string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Code      string `boil:"code" json:"code" toml:"code" yaml:"code"`
	Status    int8   `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *regionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L regionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// regionR is where relationships are stored.
type regionR struct {
	Country         *Country
	Addresses       AddressSlice
	GeoZoneMatrices GeoZoneMatrixSlice
}

// regionL is where Load methods for each relationship are stored.
type regionL struct{}

var (
	regionColumns               = []string{"id", "country_id", "name", "code", "status"}
	regionColumnsWithoutDefault = []string{"country_id", "name", "code"}
	regionColumnsWithDefault    = []string{"id", "status"}
	regionPrimaryKeyColumns     = []string{"id"}
)

type (
	// RegionSlice is an alias for a slice of pointers to Region.
	// This should generally be used opposed to []Region.
	RegionSlice []*Region
	// RegionHook is the signature for custom Region hook methods
	RegionHook func(boil.Executor, *Region) error

	regionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	regionType                 = reflect.TypeOf(&Region{})
	regionMapping              = queries.MakeStructMapping(regionType)
	regionPrimaryKeyMapping, _ = queries.BindMapping(regionType, regionMapping, regionPrimaryKeyColumns)
	regionInsertCacheMut       sync.RWMutex
	regionInsertCache          = make(map[string]insertCache)
	regionUpdateCacheMut       sync.RWMutex
	regionUpdateCache          = make(map[string]updateCache)
	regionUpsertCacheMut       sync.RWMutex
	regionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var regionBeforeInsertHooks []RegionHook
var regionBeforeUpdateHooks []RegionHook
var regionBeforeDeleteHooks []RegionHook
var regionBeforeUpsertHooks []RegionHook

var regionAfterInsertHooks []RegionHook
var regionAfterSelectHooks []RegionHook
var regionAfterUpdateHooks []RegionHook
var regionAfterDeleteHooks []RegionHook
var regionAfterUpsertHooks []RegionHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Region) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range regionBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Region) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range regionBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Region) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range regionBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Region) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range regionBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Region) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range regionAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Region) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range regionAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Region) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range regionAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Region) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range regionAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Region) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range regionAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRegionHook registers your hook function for all future operations.
func AddRegionHook(hookPoint boil.HookPoint, regionHook RegionHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		regionBeforeInsertHooks = append(regionBeforeInsertHooks, regionHook)
	case boil.BeforeUpdateHook:
		regionBeforeUpdateHooks = append(regionBeforeUpdateHooks, regionHook)
	case boil.BeforeDeleteHook:
		regionBeforeDeleteHooks = append(regionBeforeDeleteHooks, regionHook)
	case boil.BeforeUpsertHook:
		regionBeforeUpsertHooks = append(regionBeforeUpsertHooks, regionHook)
	case boil.AfterInsertHook:
		regionAfterInsertHooks = append(regionAfterInsertHooks, regionHook)
	case boil.AfterSelectHook:
		regionAfterSelectHooks = append(regionAfterSelectHooks, regionHook)
	case boil.AfterUpdateHook:
		regionAfterUpdateHooks = append(regionAfterUpdateHooks, regionHook)
	case boil.AfterDeleteHook:
		regionAfterDeleteHooks = append(regionAfterDeleteHooks, regionHook)
	case boil.AfterUpsertHook:
		regionAfterUpsertHooks = append(regionAfterUpsertHooks, regionHook)
	}
}

// OneP returns a single region record from the query, and panics on error.
func (q regionQuery) OneP() *Region {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single region record from the query.
func (q regionQuery) One() (*Region, error) {
	o := &Region{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for region")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Region records from the query, and panics on error.
func (q regionQuery) AllP() RegionSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Region records from the query.
func (q regionQuery) All() (RegionSlice, error) {
	var o []*Region

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Region slice")
	}

	if len(regionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Region records in the query, and panics on error.
func (q regionQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Region records in the query.
func (q regionQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count region rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q regionQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q regionQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if region exists")
	}

	return count > 0, nil
}

// CountryG pointed to by the foreign key.
func (o *Region) CountryG(mods ...qm.QueryMod) countryQuery {
	return o.Country(boil.GetDB(), mods...)
}

// Country pointed to by the foreign key.
func (o *Region) Country(exec boil.Executor, mods ...qm.QueryMod) countryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CountryID),
	}

	queryMods = append(queryMods, mods...)

	query := Countries(exec, queryMods...)
	queries.SetFrom(query.Query, "`country`")

	return query
}

// AddressesG retrieves all the address's address.
func (o *Region) AddressesG(mods ...qm.QueryMod) addressQuery {
	return o.Addresses(boil.GetDB(), mods...)
}

// Addresses retrieves all the address's address with an executor.
func (o *Region) Addresses(exec boil.Executor, mods ...qm.QueryMod) addressQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`region_id`=?", o.ID),
	)

	query := Addresses(exec, queryMods...)
	queries.SetFrom(query.Query, "`address` as `a`")
	return query
}

// GeoZoneMatricesG retrieves all the geo_zone_matrix's geo zone matrix.
func (o *Region) GeoZoneMatricesG(mods ...qm.QueryMod) geoZoneMatrixQuery {
	return o.GeoZoneMatrices(boil.GetDB(), mods...)
}

// GeoZoneMatrices retrieves all the geo_zone_matrix's geo zone matrix with an executor.
func (o *Region) GeoZoneMatrices(exec boil.Executor, mods ...qm.QueryMod) geoZoneMatrixQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`region_id`=?", o.ID),
	)

	query := GeoZoneMatrices(exec, queryMods...)
	queries.SetFrom(query.Query, "`geo_zone_matrix` as `a`")
	return query
}

// LoadCountry allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (regionL) LoadCountry(e boil.Executor, singular bool, maybeRegion interface{}) error {
	var slice []*Region
	var object *Region

	count := 1
	if singular {
		object = maybeRegion.(*Region)
	} else {
		slice = *maybeRegion.(*[]*Region)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &regionR{}
		}
		args[0] = object.CountryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &regionR{}
			}
			args[i] = obj.CountryID
		}
	}

	query := fmt.Sprintf(
		"select * from `country` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Country")
	}
	defer results.Close()

	var resultSlice []*Country
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Country")
	}

	if len(regionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Country = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CountryID == foreign.ID {
				local.R.Country = foreign
				break
			}
		}
	}

	return nil
}

// LoadAddresses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (regionL) LoadAddresses(e boil.Executor, singular bool, maybeRegion interface{}) error {
	var slice []*Region
	var object *Region

	count := 1
	if singular {
		object = maybeRegion.(*Region)
	} else {
		slice = *maybeRegion.(*[]*Region)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &regionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &regionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `address` where `region_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load address")
	}
	defer results.Close()

	var resultSlice []*Address
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice address")
	}

	if len(addressAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Addresses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RegionID.Int {
				local.R.Addresses = append(local.R.Addresses, foreign)
				break
			}
		}
	}

	return nil
}

// LoadGeoZoneMatrices allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (regionL) LoadGeoZoneMatrices(e boil.Executor, singular bool, maybeRegion interface{}) error {
	var slice []*Region
	var object *Region

	count := 1
	if singular {
		object = maybeRegion.(*Region)
	} else {
		slice = *maybeRegion.(*[]*Region)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &regionR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &regionR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `geo_zone_matrix` where `region_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load geo_zone_matrix")
	}
	defer results.Close()

	var resultSlice []*GeoZoneMatrix
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice geo_zone_matrix")
	}

	if len(geoZoneMatrixAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GeoZoneMatrices = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RegionID.Int {
				local.R.GeoZoneMatrices = append(local.R.GeoZoneMatrices, foreign)
				break
			}
		}
	}

	return nil
}

// SetCountryG of the region to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.Regions.
// Uses the global database handle.
func (o *Region) SetCountryG(insert bool, related *Country) error {
	return o.SetCountry(boil.GetDB(), insert, related)
}

// SetCountryP of the region to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.Regions.
// Panics on error.
func (o *Region) SetCountryP(exec boil.Executor, insert bool, related *Country) {
	if err := o.SetCountry(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCountryGP of the region to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.Regions.
// Uses the global database handle and panics on error.
func (o *Region) SetCountryGP(insert bool, related *Country) {
	if err := o.SetCountry(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCountry of the region to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.Regions.
func (o *Region) SetCountry(exec boil.Executor, insert bool, related *Country) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `region` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
		strmangle.WhereClause("`", "`", 0, regionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CountryID = related.ID

	if o.R == nil {
		o.R = &regionR{
			Country: related,
		}
	} else {
		o.R.Country = related
	}

	if related.R == nil {
		related.R = &countryR{
			Regions: RegionSlice{o},
		}
	} else {
		related.R.Regions = append(related.R.Regions, o)
	}

	return nil
}

// AddAddressesG adds the given related objects to the existing relationships
// of the region, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Region appropriately.
// Uses the global database handle.
func (o *Region) AddAddressesG(insert bool, related ...*Address) error {
	return o.AddAddresses(boil.GetDB(), insert, related...)
}

// AddAddressesP adds the given related objects to the existing relationships
// of the region, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Region appropriately.
// Panics on error.
func (o *Region) AddAddressesP(exec boil.Executor, insert bool, related ...*Address) {
	if err := o.AddAddresses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAddressesGP adds the given related objects to the existing relationships
// of the region, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Region appropriately.
// Uses the global database handle and panics on error.
func (o *Region) AddAddressesGP(insert bool, related ...*Address) {
	if err := o.AddAddresses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAddresses adds the given related objects to the existing relationships
// of the region, optionally inserting them as new records.
// Appends related to o.R.Addresses.
// Sets related.R.Region appropriately.
func (o *Region) AddAddresses(exec boil.Executor, insert bool, related ...*Address) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RegionID.Int = o.ID
			rel.RegionID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `address` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"region_id"}),
				strmangle.WhereClause("`", "`", 0, addressPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RegionID.Int = o.ID
			rel.RegionID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &regionR{
			Addresses: related,
		}
	} else {
		o.R.Addresses = append(o.R.Addresses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &addressR{
				Region: o,
			}
		} else {
			rel.R.Region = o
		}
	}
	return nil
}

// SetAddressesG removes all previously related items of the
// region replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Region's Addresses accordingly.
// Replaces o.R.Addresses with related.
// Sets related.R.Region's Addresses accordingly.
// Uses the global database handle.
func (o *Region) SetAddressesG(insert bool, related ...*Address) error {
	return o.SetAddresses(boil.GetDB(), insert, related...)
}

// SetAddressesP removes all previously related items of the
// region replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Region's Addresses accordingly.
// Replaces o.R.Addresses with related.
// Sets related.R.Region's Addresses accordingly.
// Panics on error.
func (o *Region) SetAddressesP(exec boil.Executor, insert bool, related ...*Address) {
	if err := o.SetAddresses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddressesGP removes all previously related items of the
// region replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Region's Addresses accordingly.
// Replaces o.R.Addresses with related.
// Sets related.R.Region's Addresses accordingly.
// Uses the global database handle and panics on error.
func (o *Region) SetAddressesGP(insert bool, related ...*Address) {
	if err := o.SetAddresses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAddresses removes all previously related items of the
// region replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Region's Addresses accordingly.
// Replaces o.R.Addresses with related.
// Sets related.R.Region's Addresses accordingly.
func (o *Region) SetAddresses(exec boil.Executor, insert bool, related ...*Address) error {
	query := "update `address` set `region_id` = null where `region_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Addresses {
			rel.RegionID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Region = nil
		}

		o.R.Addresses = nil
	}
	return o.AddAddresses(exec, insert, related...)
}

// RemoveAddressesG relationships from objects passed in.
// Removes related items from R.Addresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Region.
// Uses the global database handle.
func (o *Region) RemoveAddressesG(related ...*Address) error {
	return o.RemoveAddresses(boil.GetDB(), related...)
}

// RemoveAddressesP relationships from objects passed in.
// Removes related items from R.Addresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Region.
// Panics on error.
func (o *Region) RemoveAddressesP(exec boil.Executor, related ...*Address) {
	if err := o.RemoveAddresses(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAddressesGP relationships from objects passed in.
// Removes related items from R.Addresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Region.
// Uses the global database handle and panics on error.
func (o *Region) RemoveAddressesGP(related ...*Address) {
	if err := o.RemoveAddresses(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAddresses relationships from objects passed in.
// Removes related items from R.Addresses (uses pointer comparison, removal does not keep order)
// Sets related.R.Region.
func (o *Region) RemoveAddresses(exec boil.Executor, related ...*Address) error {
	var err error
	for _, rel := range related {
		rel.RegionID.Valid = false
		if rel.R != nil {
			rel.R.Region = nil
		}
		if err = rel.Update(exec, "region_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Addresses {
			if rel != ri {
				continue
			}

			ln := len(o.R.Addresses)
			if ln > 1 && i < ln-1 {
				o.R.Addresses[i] = o.R.Addresses[ln-1]
			}
			o.R.Addresses = o.R.Addresses[:ln-1]
			break
		}
	}

	return nil
}

// AddGeoZoneMatricesG adds the given related objects to the existing relationships
// of the region, optionally inserting them as new records.
// Appends related to o.R.GeoZoneMatrices.
// Sets related.R.Region appropriately.
// Uses the global database handle.
func (o *Region) AddGeoZoneMatricesG(insert bool, related ...*GeoZoneMatrix) error {
	return o.AddGeoZoneMatrices(boil.GetDB(), insert, related...)
}

// AddGeoZoneMatricesP adds the given related objects to the existing relationships
// of the region, optionally inserting them as new records.
// Appends related to o.R.GeoZoneMatrices.
// Sets related.R.Region appropriately.
// Panics on error.
func (o *Region) AddGeoZoneMatricesP(exec boil.Executor, insert bool, related ...*GeoZoneMatrix) {
	if err := o.AddGeoZoneMatrices(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGeoZoneMatricesGP adds the given related objects to the existing relationships
// of the region, optionally inserting them as new records.
// Appends related to o.R.GeoZoneMatrices.
// Sets related.R.Region appropriately.
// Uses the global database handle and panics on error.
func (o *Region) AddGeoZoneMatricesGP(insert bool, related ...*GeoZoneMatrix) {
	if err := o.AddGeoZoneMatrices(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGeoZoneMatrices adds the given related objects to the existing relationships
// of the region, optionally inserting them as new records.
// Appends related to o.R.GeoZoneMatrices.
// Sets related.R.Region appropriately.
func (o *Region) AddGeoZoneMatrices(exec boil.Executor, insert bool, related ...*GeoZoneMatrix) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RegionID.Int = o.ID
			rel.RegionID.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `geo_zone_matrix` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"region_id"}),
				strmangle.WhereClause("`", "`", 0, geoZoneMatrixPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RegionID.Int = o.ID
			rel.RegionID.Valid = true
		}
	}

	if o.R == nil {
		o.R = &regionR{
			GeoZoneMatrices: related,
		}
	} else {
		o.R.GeoZoneMatrices = append(o.R.GeoZoneMatrices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &geoZoneMatrixR{
				Region: o,
			}
		} else {
			rel.R.Region = o
		}
	}
	return nil
}

// SetGeoZoneMatricesG removes all previously related items of the
// region replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Region's GeoZoneMatrices accordingly.
// Replaces o.R.GeoZoneMatrices with related.
// Sets related.R.Region's GeoZoneMatrices accordingly.
// Uses the global database handle.
func (o *Region) SetGeoZoneMatricesG(insert bool, related ...*GeoZoneMatrix) error {
	return o.SetGeoZoneMatrices(boil.GetDB(), insert, related...)
}

// SetGeoZoneMatricesP removes all previously related items of the
// region replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Region's GeoZoneMatrices accordingly.
// Replaces o.R.GeoZoneMatrices with related.
// Sets related.R.Region's GeoZoneMatrices accordingly.
// Panics on error.
func (o *Region) SetGeoZoneMatricesP(exec boil.Executor, insert bool, related ...*GeoZoneMatrix) {
	if err := o.SetGeoZoneMatrices(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGeoZoneMatricesGP removes all previously related items of the
// region replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Region's GeoZoneMatrices accordingly.
// Replaces o.R.GeoZoneMatrices with related.
// Sets related.R.Region's GeoZoneMatrices accordingly.
// Uses the global database handle and panics on error.
func (o *Region) SetGeoZoneMatricesGP(insert bool, related ...*GeoZoneMatrix) {
	if err := o.SetGeoZoneMatrices(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGeoZoneMatrices removes all previously related items of the
// region replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Region's GeoZoneMatrices accordingly.
// Replaces o.R.GeoZoneMatrices with related.
// Sets related.R.Region's GeoZoneMatrices accordingly.
func (o *Region) SetGeoZoneMatrices(exec boil.Executor, insert bool, related ...*GeoZoneMatrix) error {
	query := "update `geo_zone_matrix` set `region_id` = null where `region_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.GeoZoneMatrices {
			rel.RegionID.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Region = nil
		}

		o.R.GeoZoneMatrices = nil
	}
	return o.AddGeoZoneMatrices(exec, insert, related...)
}

// RemoveGeoZoneMatricesG relationships from objects passed in.
// Removes related items from R.GeoZoneMatrices (uses pointer comparison, removal does not keep order)
// Sets related.R.Region.
// Uses the global database handle.
func (o *Region) RemoveGeoZoneMatricesG(related ...*GeoZoneMatrix) error {
	return o.RemoveGeoZoneMatrices(boil.GetDB(), related...)
}

// RemoveGeoZoneMatricesP relationships from objects passed in.
// Removes related items from R.GeoZoneMatrices (uses pointer comparison, removal does not keep order)
// Sets related.R.Region.
// Panics on error.
func (o *Region) RemoveGeoZoneMatricesP(exec boil.Executor, related ...*GeoZoneMatrix) {
	if err := o.RemoveGeoZoneMatrices(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveGeoZoneMatricesGP relationships from objects passed in.
// Removes related items from R.GeoZoneMatrices (uses pointer comparison, removal does not keep order)
// Sets related.R.Region.
// Uses the global database handle and panics on error.
func (o *Region) RemoveGeoZoneMatricesGP(related ...*GeoZoneMatrix) {
	if err := o.RemoveGeoZoneMatrices(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveGeoZoneMatrices relationships from objects passed in.
// Removes related items from R.GeoZoneMatrices (uses pointer comparison, removal does not keep order)
// Sets related.R.Region.
func (o *Region) RemoveGeoZoneMatrices(exec boil.Executor, related ...*GeoZoneMatrix) error {
	var err error
	for _, rel := range related {
		rel.RegionID.Valid = false
		if rel.R != nil {
			rel.R.Region = nil
		}
		if err = rel.Update(exec, "region_id"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.GeoZoneMatrices {
			if rel != ri {
				continue
			}

			ln := len(o.R.GeoZoneMatrices)
			if ln > 1 && i < ln-1 {
				o.R.GeoZoneMatrices[i] = o.R.GeoZoneMatrices[ln-1]
			}
			o.R.GeoZoneMatrices = o.R.GeoZoneMatrices[:ln-1]
			break
		}
	}

	return nil
}

// RegionsG retrieves all records.
func RegionsG(mods ...qm.QueryMod) regionQuery {
	return Regions(boil.GetDB(), mods...)
}

// Regions retrieves all the records using an executor.
func Regions(exec boil.Executor, mods ...qm.QueryMod) regionQuery {
	mods = append(mods, qm.From("`region`"))
	return regionQuery{NewQuery(exec, mods...)}
}

// FindRegionG retrieves a single record by ID.
func FindRegionG(id int, selectCols ...string) (*Region, error) {
	return FindRegion(boil.GetDB(), id, selectCols...)
}

// FindRegionGP retrieves a single record by ID, and panics on error.
func FindRegionGP(id int, selectCols ...string) *Region {
	retobj, err := FindRegion(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRegion retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRegion(exec boil.Executor, id int, selectCols ...string) (*Region, error) {
	regionObj := &Region{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `region` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(regionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from region")
	}

	return regionObj, nil
}

// FindRegionP retrieves a single record by ID with an executor, and panics on error.
func FindRegionP(exec boil.Executor, id int, selectCols ...string) *Region {
	retobj, err := FindRegion(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Region) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Region) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Region) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Region) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no region provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(regionColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	regionInsertCacheMut.RLock()
	cache, cached := regionInsertCache[key]
	regionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			regionColumns,
			regionColumnsWithDefault,
			regionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(regionType, regionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(regionType, regionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `region` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `region` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `region` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, regionPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into region")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == regionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for region")
	}

CacheNoHooks:
	if !cached {
		regionInsertCacheMut.Lock()
		regionInsertCache[key] = cache
		regionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Region record. See Update for
// whitelist behavior description.
func (o *Region) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Region record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Region) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Region, and panics on error.
// See Update for whitelist behavior description.
func (o *Region) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Region.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Region) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	regionUpdateCacheMut.RLock()
	cache, cached := regionUpdateCache[key]
	regionUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			regionColumns,
			regionPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update region, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `region` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, regionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(regionType, regionMapping, append(wl, regionPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update region row")
	}

	if !cached {
		regionUpdateCacheMut.Lock()
		regionUpdateCache[key] = cache
		regionUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q regionQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q regionQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for region")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RegionSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RegionSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RegionSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RegionSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `region` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, regionPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in region slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Region) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Region) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Region) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Region) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no region provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(regionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	regionUpsertCacheMut.RLock()
	cache, cached := regionUpsertCache[key]
	regionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			regionColumns,
			regionColumnsWithDefault,
			regionColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			regionColumns,
			regionPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert region, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "region", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `region` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(regionType, regionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(regionType, regionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for region")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == regionMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for region")
	}

CacheNoHooks:
	if !cached {
		regionUpsertCacheMut.Lock()
		regionUpsertCache[key] = cache
		regionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Region record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Region) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Region record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Region) DeleteG() error {
	if o == nil {
		return errors.New("models: no Region provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Region record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Region) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Region record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Region) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Region provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), regionPrimaryKeyMapping)
	sql := "DELETE FROM `region` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from region")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q regionQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q regionQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no regionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from region")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RegionSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RegionSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Region slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RegionSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RegionSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Region slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(regionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `region` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, regionPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from region slice")
	}

	if len(regionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Region) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Region) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Region) ReloadG() error {
	if o == nil {
		return errors.New("models: no Region provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Region) Reload(exec boil.Executor) error {
	ret, err := FindRegion(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RegionSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RegionSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RegionSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RegionSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RegionSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	regions := RegionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), regionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `region`.* FROM `region` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, regionPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&regions)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RegionSlice")
	}

	*o = regions

	return nil
}

// RegionExists checks if the Region row exists.
func RegionExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `region` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if region exists")
	}

	return exists, nil
}

// RegionExistsG checks if the Region row exists.
func RegionExistsG(id int) (bool, error) {
	return RegionExists(boil.GetDB(), id)
}

// RegionExistsGP checks if the Region row exists. Panics on error.
func RegionExistsGP(id int) bool {
	e, err := RegionExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RegionExistsP checks if the Region row exists. Panics on error.
func RegionExistsP(exec boil.Executor, id int) bool {
	e, err := RegionExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
