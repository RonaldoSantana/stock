// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// WeightClass is an object representing the database table.
type WeightClass struct {
	ID    int     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name  string  `boil:"name" json:"name" toml:"name" yaml:"name"`
	Unit  string  `boil:"unit" json:"unit" toml:"unit" yaml:"unit"`
	Value float64 `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *weightClassR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L weightClassL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// weightClassR is where relationships are stored.
type weightClassR struct {
	Products ProductSlice
}

// weightClassL is where Load methods for each relationship are stored.
type weightClassL struct{}

var (
	weightClassColumns               = []string{"id", "name", "unit", "value"}
	weightClassColumnsWithoutDefault = []string{"name", "unit"}
	weightClassColumnsWithDefault    = []string{"id", "value"}
	weightClassPrimaryKeyColumns     = []string{"id"}
)

type (
	// WeightClassSlice is an alias for a slice of pointers to WeightClass.
	// This should generally be used opposed to []WeightClass.
	WeightClassSlice []*WeightClass
	// WeightClassHook is the signature for custom WeightClass hook methods
	WeightClassHook func(boil.Executor, *WeightClass) error

	weightClassQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	weightClassType                 = reflect.TypeOf(&WeightClass{})
	weightClassMapping              = queries.MakeStructMapping(weightClassType)
	weightClassPrimaryKeyMapping, _ = queries.BindMapping(weightClassType, weightClassMapping, weightClassPrimaryKeyColumns)
	weightClassInsertCacheMut       sync.RWMutex
	weightClassInsertCache          = make(map[string]insertCache)
	weightClassUpdateCacheMut       sync.RWMutex
	weightClassUpdateCache          = make(map[string]updateCache)
	weightClassUpsertCacheMut       sync.RWMutex
	weightClassUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var weightClassBeforeInsertHooks []WeightClassHook
var weightClassBeforeUpdateHooks []WeightClassHook
var weightClassBeforeDeleteHooks []WeightClassHook
var weightClassBeforeUpsertHooks []WeightClassHook

var weightClassAfterInsertHooks []WeightClassHook
var weightClassAfterSelectHooks []WeightClassHook
var weightClassAfterUpdateHooks []WeightClassHook
var weightClassAfterDeleteHooks []WeightClassHook
var weightClassAfterUpsertHooks []WeightClassHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WeightClass) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weightClassBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WeightClass) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range weightClassBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WeightClass) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range weightClassBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WeightClass) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weightClassBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WeightClass) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weightClassAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WeightClass) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range weightClassAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WeightClass) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range weightClassAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WeightClass) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range weightClassAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WeightClass) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range weightClassAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWeightClassHook registers your hook function for all future operations.
func AddWeightClassHook(hookPoint boil.HookPoint, weightClassHook WeightClassHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		weightClassBeforeInsertHooks = append(weightClassBeforeInsertHooks, weightClassHook)
	case boil.BeforeUpdateHook:
		weightClassBeforeUpdateHooks = append(weightClassBeforeUpdateHooks, weightClassHook)
	case boil.BeforeDeleteHook:
		weightClassBeforeDeleteHooks = append(weightClassBeforeDeleteHooks, weightClassHook)
	case boil.BeforeUpsertHook:
		weightClassBeforeUpsertHooks = append(weightClassBeforeUpsertHooks, weightClassHook)
	case boil.AfterInsertHook:
		weightClassAfterInsertHooks = append(weightClassAfterInsertHooks, weightClassHook)
	case boil.AfterSelectHook:
		weightClassAfterSelectHooks = append(weightClassAfterSelectHooks, weightClassHook)
	case boil.AfterUpdateHook:
		weightClassAfterUpdateHooks = append(weightClassAfterUpdateHooks, weightClassHook)
	case boil.AfterDeleteHook:
		weightClassAfterDeleteHooks = append(weightClassAfterDeleteHooks, weightClassHook)
	case boil.AfterUpsertHook:
		weightClassAfterUpsertHooks = append(weightClassAfterUpsertHooks, weightClassHook)
	}
}

// OneP returns a single weightClass record from the query, and panics on error.
func (q weightClassQuery) OneP() *WeightClass {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single weightClass record from the query.
func (q weightClassQuery) One() (*WeightClass, error) {
	o := &WeightClass{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for weight_class")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all WeightClass records from the query, and panics on error.
func (q weightClassQuery) AllP() WeightClassSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all WeightClass records from the query.
func (q weightClassQuery) All() (WeightClassSlice, error) {
	var o []*WeightClass

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WeightClass slice")
	}

	if len(weightClassAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all WeightClass records in the query, and panics on error.
func (q weightClassQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all WeightClass records in the query.
func (q weightClassQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count weight_class rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q weightClassQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q weightClassQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if weight_class exists")
	}

	return count > 0, nil
}

// ProductsG retrieves all the product's product.
func (o *WeightClass) ProductsG(mods ...qm.QueryMod) productQuery {
	return o.Products(boil.GetDB(), mods...)
}

// Products retrieves all the product's product with an executor.
func (o *WeightClass) Products(exec boil.Executor, mods ...qm.QueryMod) productQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`weight_class_id`=?", o.ID),
	)

	query := Products(exec, queryMods...)
	queries.SetFrom(query.Query, "`product` as `a`")
	return query
}

// LoadProducts allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (weightClassL) LoadProducts(e boil.Executor, singular bool, maybeWeightClass interface{}) error {
	var slice []*WeightClass
	var object *WeightClass

	count := 1
	if singular {
		object = maybeWeightClass.(*WeightClass)
	} else {
		slice = *maybeWeightClass.(*[]*WeightClass)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &weightClassR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &weightClassR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `product` where `weight_class_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load product")
	}
	defer results.Close()

	var resultSlice []*Product
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice product")
	}

	if len(productAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Products = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.WeightClassID {
				local.R.Products = append(local.R.Products, foreign)
				break
			}
		}
	}

	return nil
}

// AddProductsG adds the given related objects to the existing relationships
// of the weight_class, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.WeightClass appropriately.
// Uses the global database handle.
func (o *WeightClass) AddProductsG(insert bool, related ...*Product) error {
	return o.AddProducts(boil.GetDB(), insert, related...)
}

// AddProductsP adds the given related objects to the existing relationships
// of the weight_class, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.WeightClass appropriately.
// Panics on error.
func (o *WeightClass) AddProductsP(exec boil.Executor, insert bool, related ...*Product) {
	if err := o.AddProducts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProductsGP adds the given related objects to the existing relationships
// of the weight_class, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.WeightClass appropriately.
// Uses the global database handle and panics on error.
func (o *WeightClass) AddProductsGP(insert bool, related ...*Product) {
	if err := o.AddProducts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddProducts adds the given related objects to the existing relationships
// of the weight_class, optionally inserting them as new records.
// Appends related to o.R.Products.
// Sets related.R.WeightClass appropriately.
func (o *WeightClass) AddProducts(exec boil.Executor, insert bool, related ...*Product) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.WeightClassID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `product` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"weight_class_id"}),
				strmangle.WhereClause("`", "`", 0, productPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.WeightClassID = o.ID
		}
	}

	if o.R == nil {
		o.R = &weightClassR{
			Products: related,
		}
	} else {
		o.R.Products = append(o.R.Products, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &productR{
				WeightClass: o,
			}
		} else {
			rel.R.WeightClass = o
		}
	}
	return nil
}

// WeightClassesG retrieves all records.
func WeightClassesG(mods ...qm.QueryMod) weightClassQuery {
	return WeightClasses(boil.GetDB(), mods...)
}

// WeightClasses retrieves all the records using an executor.
func WeightClasses(exec boil.Executor, mods ...qm.QueryMod) weightClassQuery {
	mods = append(mods, qm.From("`weight_class`"))
	return weightClassQuery{NewQuery(exec, mods...)}
}

// FindWeightClassG retrieves a single record by ID.
func FindWeightClassG(id int, selectCols ...string) (*WeightClass, error) {
	return FindWeightClass(boil.GetDB(), id, selectCols...)
}

// FindWeightClassGP retrieves a single record by ID, and panics on error.
func FindWeightClassGP(id int, selectCols ...string) *WeightClass {
	retobj, err := FindWeightClass(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindWeightClass retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWeightClass(exec boil.Executor, id int, selectCols ...string) (*WeightClass, error) {
	weightClassObj := &WeightClass{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `weight_class` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(weightClassObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from weight_class")
	}

	return weightClassObj, nil
}

// FindWeightClassP retrieves a single record by ID with an executor, and panics on error.
func FindWeightClassP(exec boil.Executor, id int, selectCols ...string) *WeightClass {
	retobj, err := FindWeightClass(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *WeightClass) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *WeightClass) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *WeightClass) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *WeightClass) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no weight_class provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(weightClassColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	weightClassInsertCacheMut.RLock()
	cache, cached := weightClassInsertCache[key]
	weightClassInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			weightClassColumns,
			weightClassColumnsWithDefault,
			weightClassColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(weightClassType, weightClassMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(weightClassType, weightClassMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `weight_class` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `weight_class` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `weight_class` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, weightClassPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into weight_class")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == weightClassMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for weight_class")
	}

CacheNoHooks:
	if !cached {
		weightClassInsertCacheMut.Lock()
		weightClassInsertCache[key] = cache
		weightClassInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single WeightClass record. See Update for
// whitelist behavior description.
func (o *WeightClass) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single WeightClass record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *WeightClass) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the WeightClass, and panics on error.
// See Update for whitelist behavior description.
func (o *WeightClass) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the WeightClass.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *WeightClass) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	weightClassUpdateCacheMut.RLock()
	cache, cached := weightClassUpdateCache[key]
	weightClassUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			weightClassColumns,
			weightClassPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update weight_class, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `weight_class` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, weightClassPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(weightClassType, weightClassMapping, append(wl, weightClassPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update weight_class row")
	}

	if !cached {
		weightClassUpdateCacheMut.Lock()
		weightClassUpdateCache[key] = cache
		weightClassUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q weightClassQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q weightClassQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for weight_class")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o WeightClassSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o WeightClassSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o WeightClassSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WeightClassSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weightClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `weight_class` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, weightClassPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in weightClass slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *WeightClass) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *WeightClass) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *WeightClass) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *WeightClass) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no weight_class provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(weightClassColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	weightClassUpsertCacheMut.RLock()
	cache, cached := weightClassUpsertCache[key]
	weightClassUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			weightClassColumns,
			weightClassColumnsWithDefault,
			weightClassColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			weightClassColumns,
			weightClassPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert weight_class, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "weight_class", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `weight_class` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(weightClassType, weightClassMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(weightClassType, weightClassMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for weight_class")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == weightClassMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for weight_class")
	}

CacheNoHooks:
	if !cached {
		weightClassUpsertCacheMut.Lock()
		weightClassUpsertCache[key] = cache
		weightClassUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single WeightClass record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *WeightClass) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single WeightClass record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *WeightClass) DeleteG() error {
	if o == nil {
		return errors.New("models: no WeightClass provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single WeightClass record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *WeightClass) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single WeightClass record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WeightClass) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no WeightClass provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), weightClassPrimaryKeyMapping)
	sql := "DELETE FROM `weight_class` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from weight_class")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q weightClassQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q weightClassQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no weightClassQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from weight_class")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o WeightClassSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o WeightClassSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no WeightClass slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o WeightClassSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WeightClassSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no WeightClass slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(weightClassBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weightClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `weight_class` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, weightClassPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from weightClass slice")
	}

	if len(weightClassAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *WeightClass) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *WeightClass) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *WeightClass) ReloadG() error {
	if o == nil {
		return errors.New("models: no WeightClass provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WeightClass) Reload(exec boil.Executor) error {
	ret, err := FindWeightClass(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *WeightClassSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *WeightClassSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WeightClassSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty WeightClassSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WeightClassSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	weightClasses := WeightClassSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), weightClassPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `weight_class`.* FROM `weight_class` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, weightClassPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&weightClasses)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WeightClassSlice")
	}

	*o = weightClasses

	return nil
}

// WeightClassExists checks if the WeightClass row exists.
func WeightClassExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `weight_class` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if weight_class exists")
	}

	return exists, nil
}

// WeightClassExistsG checks if the WeightClass row exists.
func WeightClassExistsG(id int) (bool, error) {
	return WeightClassExists(boil.GetDB(), id)
}

// WeightClassExistsGP checks if the WeightClass row exists. Panics on error.
func WeightClassExistsGP(id int) bool {
	e, err := WeightClassExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// WeightClassExistsP checks if the WeightClass row exists. Panics on error.
func WeightClassExistsP(exec boil.Executor, id int) bool {
	e, err := WeightClassExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
