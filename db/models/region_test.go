// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testRegions(t *testing.T) {
	t.Parallel()

	query := Regions(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testRegionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = region.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Regions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Regions(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Regions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRegionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RegionSlice{region}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Regions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testRegionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := RegionExists(tx, region.ID)
	if err != nil {
		t.Errorf("Unable to check if Region exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RegionExistsG to return true, but got false.")
	}
}
func testRegionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	regionFound, err := FindRegion(tx, region.ID)
	if err != nil {
		t.Error(err)
	}

	if regionFound == nil {
		t.Error("want a record, got nil")
	}
}
func testRegionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Regions(tx).Bind(region); err != nil {
		t.Error(err)
	}
}

func testRegionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Regions(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRegionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	regionOne := &Region{}
	regionTwo := &Region{}
	if err = randomize.Struct(seed, regionOne, regionDBTypes, false, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}
	if err = randomize.Struct(seed, regionTwo, regionDBTypes, false, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = regionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = regionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Regions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRegionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	regionOne := &Region{}
	regionTwo := &Region{}
	if err = randomize.Struct(seed, regionOne, regionDBTypes, false, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}
	if err = randomize.Struct(seed, regionTwo, regionDBTypes, false, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = regionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = regionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Regions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func regionBeforeInsertHook(e boil.Executor, o *Region) error {
	*o = Region{}
	return nil
}

func regionAfterInsertHook(e boil.Executor, o *Region) error {
	*o = Region{}
	return nil
}

func regionAfterSelectHook(e boil.Executor, o *Region) error {
	*o = Region{}
	return nil
}

func regionBeforeUpdateHook(e boil.Executor, o *Region) error {
	*o = Region{}
	return nil
}

func regionAfterUpdateHook(e boil.Executor, o *Region) error {
	*o = Region{}
	return nil
}

func regionBeforeDeleteHook(e boil.Executor, o *Region) error {
	*o = Region{}
	return nil
}

func regionAfterDeleteHook(e boil.Executor, o *Region) error {
	*o = Region{}
	return nil
}

func regionBeforeUpsertHook(e boil.Executor, o *Region) error {
	*o = Region{}
	return nil
}

func regionAfterUpsertHook(e boil.Executor, o *Region) error {
	*o = Region{}
	return nil
}

func testRegionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Region{}
	o := &Region{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, regionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Region object: %s", err)
	}

	AddRegionHook(boil.BeforeInsertHook, regionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	regionBeforeInsertHooks = []RegionHook{}

	AddRegionHook(boil.AfterInsertHook, regionAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	regionAfterInsertHooks = []RegionHook{}

	AddRegionHook(boil.AfterSelectHook, regionAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	regionAfterSelectHooks = []RegionHook{}

	AddRegionHook(boil.BeforeUpdateHook, regionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	regionBeforeUpdateHooks = []RegionHook{}

	AddRegionHook(boil.AfterUpdateHook, regionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	regionAfterUpdateHooks = []RegionHook{}

	AddRegionHook(boil.BeforeDeleteHook, regionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	regionBeforeDeleteHooks = []RegionHook{}

	AddRegionHook(boil.AfterDeleteHook, regionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	regionAfterDeleteHooks = []RegionHook{}

	AddRegionHook(boil.BeforeUpsertHook, regionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	regionBeforeUpsertHooks = []RegionHook{}

	AddRegionHook(boil.AfterUpsertHook, regionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	regionAfterUpsertHooks = []RegionHook{}
}
func testRegionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Regions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx, regionColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Regions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRegionToManyAddresses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Region
	var b, c Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, addressDBTypes, false, addressColumnsWithDefault...)
	randomize.Struct(seed, &c, addressDBTypes, false, addressColumnsWithDefault...)

	b.RegionID.Valid = true
	c.RegionID.Valid = true
	b.RegionID.Int = a.ID
	c.RegionID.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	address, err := a.Addresses(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range address {
		if v.RegionID.Int == b.RegionID.Int {
			bFound = true
		}
		if v.RegionID.Int == c.RegionID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RegionSlice{&a}
	if err = a.L.LoadAddresses(tx, false, (*[]*Region)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Addresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Addresses = nil
	if err = a.L.LoadAddresses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Addresses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", address)
	}
}

func testRegionToManyGeoZoneMatrices(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Region
	var b, c GeoZoneMatrix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, geoZoneMatrixDBTypes, false, geoZoneMatrixColumnsWithDefault...)
	randomize.Struct(seed, &c, geoZoneMatrixDBTypes, false, geoZoneMatrixColumnsWithDefault...)

	b.RegionID.Valid = true
	c.RegionID.Valid = true
	b.RegionID.Int = a.ID
	c.RegionID.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	geoZoneMatrix, err := a.GeoZoneMatrices(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range geoZoneMatrix {
		if v.RegionID.Int == b.RegionID.Int {
			bFound = true
		}
		if v.RegionID.Int == c.RegionID.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RegionSlice{&a}
	if err = a.L.LoadGeoZoneMatrices(tx, false, (*[]*Region)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GeoZoneMatrices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GeoZoneMatrices = nil
	if err = a.L.LoadGeoZoneMatrices(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GeoZoneMatrices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", geoZoneMatrix)
	}
}

func testRegionToManyAddOpAddresses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Region
	var b, c, d, e Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Address{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Address{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAddresses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RegionID.Int {
			t.Error("foreign key was wrong value", a.ID, first.RegionID.Int)
		}
		if a.ID != second.RegionID.Int {
			t.Error("foreign key was wrong value", a.ID, second.RegionID.Int)
		}

		if first.R.Region != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Region != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Addresses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Addresses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Addresses(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRegionToManySetOpAddresses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Region
	var b, c, d, e Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Address{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetAddresses(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Addresses(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAddresses(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Addresses(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RegionID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RegionID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.RegionID.Int {
		t.Error("foreign key was wrong value", a.ID, d.RegionID.Int)
	}
	if a.ID != e.RegionID.Int {
		t.Error("foreign key was wrong value", a.ID, e.RegionID.Int)
	}

	if b.R.Region != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Region != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Region != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Region != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Addresses[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Addresses[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRegionToManyRemoveOpAddresses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Region
	var b, c, d, e Address

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Address{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddAddresses(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Addresses(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAddresses(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Addresses(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RegionID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RegionID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Region != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Region != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Region != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Region != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Addresses) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Addresses[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Addresses[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRegionToManyAddOpGeoZoneMatrices(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Region
	var b, c, d, e GeoZoneMatrix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GeoZoneMatrix{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, geoZoneMatrixDBTypes, false, strmangle.SetComplement(geoZoneMatrixPrimaryKeyColumns, geoZoneMatrixColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GeoZoneMatrix{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGeoZoneMatrices(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.RegionID.Int {
			t.Error("foreign key was wrong value", a.ID, first.RegionID.Int)
		}
		if a.ID != second.RegionID.Int {
			t.Error("foreign key was wrong value", a.ID, second.RegionID.Int)
		}

		if first.R.Region != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Region != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GeoZoneMatrices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GeoZoneMatrices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GeoZoneMatrices(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRegionToManySetOpGeoZoneMatrices(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Region
	var b, c, d, e GeoZoneMatrix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GeoZoneMatrix{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, geoZoneMatrixDBTypes, false, strmangle.SetComplement(geoZoneMatrixPrimaryKeyColumns, geoZoneMatrixColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetGeoZoneMatrices(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetGeoZoneMatrices(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RegionID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RegionID.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.RegionID.Int {
		t.Error("foreign key was wrong value", a.ID, d.RegionID.Int)
	}
	if a.ID != e.RegionID.Int {
		t.Error("foreign key was wrong value", a.ID, e.RegionID.Int)
	}

	if b.R.Region != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Region != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Region != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Region != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.GeoZoneMatrices[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.GeoZoneMatrices[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRegionToManyRemoveOpGeoZoneMatrices(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Region
	var b, c, d, e GeoZoneMatrix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GeoZoneMatrix{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, geoZoneMatrixDBTypes, false, strmangle.SetComplement(geoZoneMatrixPrimaryKeyColumns, geoZoneMatrixColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddGeoZoneMatrices(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveGeoZoneMatrices(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.RegionID.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.RegionID.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Region != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Region != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Region != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Region != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.GeoZoneMatrices) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.GeoZoneMatrices[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.GeoZoneMatrices[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRegionToOneCountryUsingCountry(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Region
	var foreign Country

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CountryID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := RegionSlice{&local}
	if err = local.L.LoadCountry(tx, false, (*[]*Region)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testRegionToOneSetOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Region
	var b, c Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Country{&b, &c} {
		err = a.SetCountry(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Regions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CountryID != x.ID {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CountryID != x.ID {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}
func testRegionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = region.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRegionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RegionSlice{region}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testRegionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Regions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	regionDBTypes = map[string]string{`Code`: `varchar`, `CountryID`: `int`, `ID`: `int`, `Name`: `varchar`, `Status`: `tinyint`}
	_             = bytes.MinRead
)

func testRegionsUpdate(t *testing.T) {
	t.Parallel()

	if len(regionColumns) == len(regionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Regions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	if err = region.Update(tx); err != nil {
		t.Error(err)
	}
}

func testRegionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(regionColumns) == len(regionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	region := &Region{}
	if err = randomize.Struct(seed, region, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Regions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, region, regionDBTypes, true, regionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(regionColumns, regionPrimaryKeyColumns) {
		fields = regionColumns
	} else {
		fields = strmangle.SetComplement(
			regionColumns,
			regionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(region))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := RegionSlice{region}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testRegionsUpsert(t *testing.T) {
	t.Parallel()

	if len(regionColumns) == len(regionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	region := Region{}
	if err = randomize.Struct(seed, &region, regionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = region.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Region: %s", err)
	}

	count, err := Regions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &region, regionDBTypes, false, regionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	if err = region.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Region: %s", err)
	}

	count, err = Regions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
