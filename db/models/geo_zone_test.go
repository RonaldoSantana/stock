// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testGeoZones(t *testing.T) {
	t.Parallel()

	query := GeoZones(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testGeoZonesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = geoZone.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZones(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGeoZonesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = GeoZones(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := GeoZones(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGeoZonesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GeoZoneSlice{geoZone}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZones(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testGeoZonesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := GeoZoneExists(tx, geoZone.ID)
	if err != nil {
		t.Errorf("Unable to check if GeoZone exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GeoZoneExistsG to return true, but got false.")
	}
}
func testGeoZonesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	geoZoneFound, err := FindGeoZone(tx, geoZone.ID)
	if err != nil {
		t.Error(err)
	}

	if geoZoneFound == nil {
		t.Error("want a record, got nil")
	}
}
func testGeoZonesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = GeoZones(tx).Bind(geoZone); err != nil {
		t.Error(err)
	}
}

func testGeoZonesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := GeoZones(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGeoZonesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneOne := &GeoZone{}
	geoZoneTwo := &GeoZone{}
	if err = randomize.Struct(seed, geoZoneOne, geoZoneDBTypes, false, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}
	if err = randomize.Struct(seed, geoZoneTwo, geoZoneDBTypes, false, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = geoZoneTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := GeoZones(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGeoZonesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	geoZoneOne := &GeoZone{}
	geoZoneTwo := &GeoZone{}
	if err = randomize.Struct(seed, geoZoneOne, geoZoneDBTypes, false, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}
	if err = randomize.Struct(seed, geoZoneTwo, geoZoneDBTypes, false, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = geoZoneTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZones(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func geoZoneBeforeInsertHook(e boil.Executor, o *GeoZone) error {
	*o = GeoZone{}
	return nil
}

func geoZoneAfterInsertHook(e boil.Executor, o *GeoZone) error {
	*o = GeoZone{}
	return nil
}

func geoZoneAfterSelectHook(e boil.Executor, o *GeoZone) error {
	*o = GeoZone{}
	return nil
}

func geoZoneBeforeUpdateHook(e boil.Executor, o *GeoZone) error {
	*o = GeoZone{}
	return nil
}

func geoZoneAfterUpdateHook(e boil.Executor, o *GeoZone) error {
	*o = GeoZone{}
	return nil
}

func geoZoneBeforeDeleteHook(e boil.Executor, o *GeoZone) error {
	*o = GeoZone{}
	return nil
}

func geoZoneAfterDeleteHook(e boil.Executor, o *GeoZone) error {
	*o = GeoZone{}
	return nil
}

func geoZoneBeforeUpsertHook(e boil.Executor, o *GeoZone) error {
	*o = GeoZone{}
	return nil
}

func geoZoneAfterUpsertHook(e boil.Executor, o *GeoZone) error {
	*o = GeoZone{}
	return nil
}

func testGeoZonesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &GeoZone{}
	o := &GeoZone{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, geoZoneDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GeoZone object: %s", err)
	}

	AddGeoZoneHook(boil.BeforeInsertHook, geoZoneBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	geoZoneBeforeInsertHooks = []GeoZoneHook{}

	AddGeoZoneHook(boil.AfterInsertHook, geoZoneAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	geoZoneAfterInsertHooks = []GeoZoneHook{}

	AddGeoZoneHook(boil.AfterSelectHook, geoZoneAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	geoZoneAfterSelectHooks = []GeoZoneHook{}

	AddGeoZoneHook(boil.BeforeUpdateHook, geoZoneBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	geoZoneBeforeUpdateHooks = []GeoZoneHook{}

	AddGeoZoneHook(boil.AfterUpdateHook, geoZoneAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	geoZoneAfterUpdateHooks = []GeoZoneHook{}

	AddGeoZoneHook(boil.BeforeDeleteHook, geoZoneBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	geoZoneBeforeDeleteHooks = []GeoZoneHook{}

	AddGeoZoneHook(boil.AfterDeleteHook, geoZoneAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	geoZoneAfterDeleteHooks = []GeoZoneHook{}

	AddGeoZoneHook(boil.BeforeUpsertHook, geoZoneBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	geoZoneBeforeUpsertHooks = []GeoZoneHook{}

	AddGeoZoneHook(boil.AfterUpsertHook, geoZoneAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	geoZoneAfterUpsertHooks = []GeoZoneHook{}
}
func testGeoZonesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZones(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGeoZonesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx, geoZoneColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := GeoZones(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGeoZoneToManyGeoZoneMatrices(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GeoZone
	var b, c GeoZoneMatrix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, geoZoneMatrixDBTypes, false, geoZoneMatrixColumnsWithDefault...)
	randomize.Struct(seed, &c, geoZoneMatrixDBTypes, false, geoZoneMatrixColumnsWithDefault...)

	b.GeoZoneID = a.ID
	c.GeoZoneID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	geoZoneMatrix, err := a.GeoZoneMatrices(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range geoZoneMatrix {
		if v.GeoZoneID == b.GeoZoneID {
			bFound = true
		}
		if v.GeoZoneID == c.GeoZoneID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GeoZoneSlice{&a}
	if err = a.L.LoadGeoZoneMatrices(tx, false, (*[]*GeoZone)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GeoZoneMatrices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.GeoZoneMatrices = nil
	if err = a.L.LoadGeoZoneMatrices(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.GeoZoneMatrices); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", geoZoneMatrix)
	}
}

func testGeoZoneToManyTaxRates(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GeoZone
	var b, c TaxRate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	randomize.Struct(seed, &b, taxRateDBTypes, false, taxRateColumnsWithDefault...)
	randomize.Struct(seed, &c, taxRateDBTypes, false, taxRateColumnsWithDefault...)

	b.GeoZoneID = a.ID
	c.GeoZoneID = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	taxRate, err := a.TaxRates(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range taxRate {
		if v.GeoZoneID == b.GeoZoneID {
			bFound = true
		}
		if v.GeoZoneID == c.GeoZoneID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := GeoZoneSlice{&a}
	if err = a.L.LoadTaxRates(tx, false, (*[]*GeoZone)(&slice)); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TaxRates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TaxRates = nil
	if err = a.L.LoadTaxRates(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TaxRates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", taxRate)
	}
}

func testGeoZoneToManyAddOpGeoZoneMatrices(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GeoZone
	var b, c, d, e GeoZoneMatrix

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, geoZoneDBTypes, false, strmangle.SetComplement(geoZonePrimaryKeyColumns, geoZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*GeoZoneMatrix{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, geoZoneMatrixDBTypes, false, strmangle.SetComplement(geoZoneMatrixPrimaryKeyColumns, geoZoneMatrixColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*GeoZoneMatrix{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddGeoZoneMatrices(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GeoZoneID {
			t.Error("foreign key was wrong value", a.ID, first.GeoZoneID)
		}
		if a.ID != second.GeoZoneID {
			t.Error("foreign key was wrong value", a.ID, second.GeoZoneID)
		}

		if first.R.GeoZone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GeoZone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.GeoZoneMatrices[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.GeoZoneMatrices[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.GeoZoneMatrices(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testGeoZoneToManyAddOpTaxRates(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GeoZone
	var b, c, d, e TaxRate

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, geoZoneDBTypes, false, strmangle.SetComplement(geoZonePrimaryKeyColumns, geoZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TaxRate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, taxRateDBTypes, false, strmangle.SetComplement(taxRatePrimaryKeyColumns, taxRateColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TaxRate{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTaxRates(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.GeoZoneID {
			t.Error("foreign key was wrong value", a.ID, first.GeoZoneID)
		}
		if a.ID != second.GeoZoneID {
			t.Error("foreign key was wrong value", a.ID, second.GeoZoneID)
		}

		if first.R.GeoZone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.GeoZone != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TaxRates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TaxRates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TaxRates(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testGeoZonesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = geoZone.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGeoZonesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GeoZoneSlice{geoZone}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testGeoZonesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := GeoZones(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	geoZoneDBTypes = map[string]string{`CreatedAt`: `timestamp`, `Description`: `varchar`, `ID`: `int`, `Name`: `varchar`, `UpdatedAt`: `timestamp`}
	_              = bytes.MinRead
)

func testGeoZonesUpdate(t *testing.T) {
	t.Parallel()

	if len(geoZoneColumns) == len(geoZonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZones(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	if err = geoZone.Update(tx); err != nil {
		t.Error(err)
	}
}

func testGeoZonesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(geoZoneColumns) == len(geoZonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	geoZone := &GeoZone{}
	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZones(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, geoZone, geoZoneDBTypes, true, geoZonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(geoZoneColumns, geoZonePrimaryKeyColumns) {
		fields = geoZoneColumns
	} else {
		fields = strmangle.SetComplement(
			geoZoneColumns,
			geoZonePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(geoZone))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := GeoZoneSlice{geoZone}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testGeoZonesUpsert(t *testing.T) {
	t.Parallel()

	if len(geoZoneColumns) == len(geoZonePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	geoZone := GeoZone{}
	if err = randomize.Struct(seed, &geoZone, geoZoneDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZone.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert GeoZone: %s", err)
	}

	count, err := GeoZones(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &geoZone, geoZoneDBTypes, false, geoZonePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	if err = geoZone.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert GeoZone: %s", err)
	}

	count, err = GeoZones(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
