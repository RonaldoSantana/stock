// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testGeoZoneMatrices(t *testing.T) {
	t.Parallel()

	query := GeoZoneMatrices(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testGeoZoneMatricesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = geoZoneMatrix.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGeoZoneMatricesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = GeoZoneMatrices(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGeoZoneMatricesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GeoZoneMatrixSlice{geoZoneMatrix}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testGeoZoneMatricesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := GeoZoneMatrixExists(tx, geoZoneMatrix.ID)
	if err != nil {
		t.Errorf("Unable to check if GeoZoneMatrix exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GeoZoneMatrixExistsG to return true, but got false.")
	}
}
func testGeoZoneMatricesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	geoZoneMatrixFound, err := FindGeoZoneMatrix(tx, geoZoneMatrix.ID)
	if err != nil {
		t.Error(err)
	}

	if geoZoneMatrixFound == nil {
		t.Error("want a record, got nil")
	}
}
func testGeoZoneMatricesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = GeoZoneMatrices(tx).Bind(geoZoneMatrix); err != nil {
		t.Error(err)
	}
}

func testGeoZoneMatricesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := GeoZoneMatrices(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGeoZoneMatricesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrixOne := &GeoZoneMatrix{}
	geoZoneMatrixTwo := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrixOne, geoZoneMatrixDBTypes, false, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}
	if err = randomize.Struct(seed, geoZoneMatrixTwo, geoZoneMatrixDBTypes, false, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrixOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = geoZoneMatrixTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := GeoZoneMatrices(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGeoZoneMatricesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	geoZoneMatrixOne := &GeoZoneMatrix{}
	geoZoneMatrixTwo := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrixOne, geoZoneMatrixDBTypes, false, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}
	if err = randomize.Struct(seed, geoZoneMatrixTwo, geoZoneMatrixDBTypes, false, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrixOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = geoZoneMatrixTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func geoZoneMatrixBeforeInsertHook(e boil.Executor, o *GeoZoneMatrix) error {
	*o = GeoZoneMatrix{}
	return nil
}

func geoZoneMatrixAfterInsertHook(e boil.Executor, o *GeoZoneMatrix) error {
	*o = GeoZoneMatrix{}
	return nil
}

func geoZoneMatrixAfterSelectHook(e boil.Executor, o *GeoZoneMatrix) error {
	*o = GeoZoneMatrix{}
	return nil
}

func geoZoneMatrixBeforeUpdateHook(e boil.Executor, o *GeoZoneMatrix) error {
	*o = GeoZoneMatrix{}
	return nil
}

func geoZoneMatrixAfterUpdateHook(e boil.Executor, o *GeoZoneMatrix) error {
	*o = GeoZoneMatrix{}
	return nil
}

func geoZoneMatrixBeforeDeleteHook(e boil.Executor, o *GeoZoneMatrix) error {
	*o = GeoZoneMatrix{}
	return nil
}

func geoZoneMatrixAfterDeleteHook(e boil.Executor, o *GeoZoneMatrix) error {
	*o = GeoZoneMatrix{}
	return nil
}

func geoZoneMatrixBeforeUpsertHook(e boil.Executor, o *GeoZoneMatrix) error {
	*o = GeoZoneMatrix{}
	return nil
}

func geoZoneMatrixAfterUpsertHook(e boil.Executor, o *GeoZoneMatrix) error {
	*o = GeoZoneMatrix{}
	return nil
}

func testGeoZoneMatricesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &GeoZoneMatrix{}
	o := &GeoZoneMatrix{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, geoZoneMatrixDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix object: %s", err)
	}

	AddGeoZoneMatrixHook(boil.BeforeInsertHook, geoZoneMatrixBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	geoZoneMatrixBeforeInsertHooks = []GeoZoneMatrixHook{}

	AddGeoZoneMatrixHook(boil.AfterInsertHook, geoZoneMatrixAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	geoZoneMatrixAfterInsertHooks = []GeoZoneMatrixHook{}

	AddGeoZoneMatrixHook(boil.AfterSelectHook, geoZoneMatrixAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	geoZoneMatrixAfterSelectHooks = []GeoZoneMatrixHook{}

	AddGeoZoneMatrixHook(boil.BeforeUpdateHook, geoZoneMatrixBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	geoZoneMatrixBeforeUpdateHooks = []GeoZoneMatrixHook{}

	AddGeoZoneMatrixHook(boil.AfterUpdateHook, geoZoneMatrixAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	geoZoneMatrixAfterUpdateHooks = []GeoZoneMatrixHook{}

	AddGeoZoneMatrixHook(boil.BeforeDeleteHook, geoZoneMatrixBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	geoZoneMatrixBeforeDeleteHooks = []GeoZoneMatrixHook{}

	AddGeoZoneMatrixHook(boil.AfterDeleteHook, geoZoneMatrixAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	geoZoneMatrixAfterDeleteHooks = []GeoZoneMatrixHook{}

	AddGeoZoneMatrixHook(boil.BeforeUpsertHook, geoZoneMatrixBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	geoZoneMatrixBeforeUpsertHooks = []GeoZoneMatrixHook{}

	AddGeoZoneMatrixHook(boil.AfterUpsertHook, geoZoneMatrixAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	geoZoneMatrixAfterUpsertHooks = []GeoZoneMatrixHook{}
}
func testGeoZoneMatricesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGeoZoneMatricesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx, geoZoneMatrixColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGeoZoneMatrixToOneCountryUsingCountry(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local GeoZoneMatrix
	var foreign Country

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CountryID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GeoZoneMatrixSlice{&local}
	if err = local.L.LoadCountry(tx, false, (*[]*GeoZoneMatrix)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGeoZoneMatrixToOneGeoZoneUsingGeoZone(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local GeoZoneMatrix
	var foreign GeoZone

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, geoZoneDBTypes, true, geoZoneColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZone struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.GeoZoneID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.GeoZone(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GeoZoneMatrixSlice{&local}
	if err = local.L.LoadGeoZone(tx, false, (*[]*GeoZoneMatrix)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.GeoZone == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.GeoZone = nil
	if err = local.L.LoadGeoZone(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.GeoZone == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGeoZoneMatrixToOneRegionUsingRegion(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local GeoZoneMatrix
	var foreign Region

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	local.RegionID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.RegionID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Region(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := GeoZoneMatrixSlice{&local}
	if err = local.L.LoadRegion(tx, false, (*[]*GeoZoneMatrix)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Region == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Region = nil
	if err = local.L.LoadRegion(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Region == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testGeoZoneMatrixToOneSetOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GeoZoneMatrix
	var b, c Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, geoZoneMatrixDBTypes, false, strmangle.SetComplement(geoZoneMatrixPrimaryKeyColumns, geoZoneMatrixColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Country{&b, &c} {
		err = a.SetCountry(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GeoZoneMatrices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CountryID != x.ID {
			t.Error("foreign key was wrong value", a.CountryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID))
		reflect.Indirect(reflect.ValueOf(&a.CountryID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CountryID != x.ID {
			t.Error("foreign key was wrong value", a.CountryID, x.ID)
		}
	}
}
func testGeoZoneMatrixToOneSetOpGeoZoneUsingGeoZone(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GeoZoneMatrix
	var b, c GeoZone

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, geoZoneMatrixDBTypes, false, strmangle.SetComplement(geoZoneMatrixPrimaryKeyColumns, geoZoneMatrixColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, geoZoneDBTypes, false, strmangle.SetComplement(geoZonePrimaryKeyColumns, geoZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, geoZoneDBTypes, false, strmangle.SetComplement(geoZonePrimaryKeyColumns, geoZoneColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*GeoZone{&b, &c} {
		err = a.SetGeoZone(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.GeoZone != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GeoZoneMatrices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.GeoZoneID != x.ID {
			t.Error("foreign key was wrong value", a.GeoZoneID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.GeoZoneID))
		reflect.Indirect(reflect.ValueOf(&a.GeoZoneID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.GeoZoneID != x.ID {
			t.Error("foreign key was wrong value", a.GeoZoneID, x.ID)
		}
	}
}
func testGeoZoneMatrixToOneSetOpRegionUsingRegion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GeoZoneMatrix
	var b, c Region

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, geoZoneMatrixDBTypes, false, strmangle.SetComplement(geoZoneMatrixPrimaryKeyColumns, geoZoneMatrixColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Region{&b, &c} {
		err = a.SetRegion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Region != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.GeoZoneMatrices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RegionID.Int != x.ID {
			t.Error("foreign key was wrong value", a.RegionID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RegionID.Int))
		reflect.Indirect(reflect.ValueOf(&a.RegionID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RegionID.Int != x.ID {
			t.Error("foreign key was wrong value", a.RegionID.Int, x.ID)
		}
	}
}

func testGeoZoneMatrixToOneRemoveOpRegionUsingRegion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a GeoZoneMatrix
	var b Region

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, geoZoneMatrixDBTypes, false, strmangle.SetComplement(geoZoneMatrixPrimaryKeyColumns, geoZoneMatrixColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRegion(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRegion(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Region(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Region != nil {
		t.Error("R struct entry should be nil")
	}

	if a.RegionID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.GeoZoneMatrices) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testGeoZoneMatricesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = geoZoneMatrix.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testGeoZoneMatricesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := GeoZoneMatrixSlice{geoZoneMatrix}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testGeoZoneMatricesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := GeoZoneMatrices(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	geoZoneMatrixDBTypes = map[string]string{`CountryID`: `int`, `CreatedAt`: `timestamp`, `GeoZoneID`: `int`, `ID`: `int`, `RegionID`: `int`, `UpdatedAt`: `timestamp`}
	_                    = bytes.MinRead
)

func testGeoZoneMatricesUpdate(t *testing.T) {
	t.Parallel()

	if len(geoZoneMatrixColumns) == len(geoZoneMatrixPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	if err = geoZoneMatrix.Update(tx); err != nil {
		t.Error(err)
	}
}

func testGeoZoneMatricesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(geoZoneMatrixColumns) == len(geoZoneMatrixPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	geoZoneMatrix := &GeoZoneMatrix{}
	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, geoZoneMatrix, geoZoneMatrixDBTypes, true, geoZoneMatrixPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(geoZoneMatrixColumns, geoZoneMatrixPrimaryKeyColumns) {
		fields = geoZoneMatrixColumns
	} else {
		fields = strmangle.SetComplement(
			geoZoneMatrixColumns,
			geoZoneMatrixPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(geoZoneMatrix))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := GeoZoneMatrixSlice{geoZoneMatrix}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testGeoZoneMatricesUpsert(t *testing.T) {
	t.Parallel()

	if len(geoZoneMatrixColumns) == len(geoZoneMatrixPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	geoZoneMatrix := GeoZoneMatrix{}
	if err = randomize.Struct(seed, &geoZoneMatrix, geoZoneMatrixDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = geoZoneMatrix.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert GeoZoneMatrix: %s", err)
	}

	count, err := GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &geoZoneMatrix, geoZoneMatrixDBTypes, false, geoZoneMatrixPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GeoZoneMatrix struct: %s", err)
	}

	if err = geoZoneMatrix.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert GeoZoneMatrix: %s", err)
	}

	count, err = GeoZoneMatrices(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
