// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// GeoZone is an object representing the database table.
type GeoZone struct {
	ID          int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description string    `boil:"description" json:"description" toml:"description" yaml:"description"`
	CreatedAt   time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt   time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *geoZoneR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L geoZoneL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// geoZoneR is where relationships are stored.
type geoZoneR struct {
	GeoZoneMatrices GeoZoneMatrixSlice
	TaxRates        TaxRateSlice
}

// geoZoneL is where Load methods for each relationship are stored.
type geoZoneL struct{}

var (
	geoZoneColumns               = []string{"id", "name", "description", "created_at", "updated_at"}
	geoZoneColumnsWithoutDefault = []string{"name", "description"}
	geoZoneColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	geoZonePrimaryKeyColumns     = []string{"id"}
)

type (
	// GeoZoneSlice is an alias for a slice of pointers to GeoZone.
	// This should generally be used opposed to []GeoZone.
	GeoZoneSlice []*GeoZone
	// GeoZoneHook is the signature for custom GeoZone hook methods
	GeoZoneHook func(boil.Executor, *GeoZone) error

	geoZoneQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	geoZoneType                 = reflect.TypeOf(&GeoZone{})
	geoZoneMapping              = queries.MakeStructMapping(geoZoneType)
	geoZonePrimaryKeyMapping, _ = queries.BindMapping(geoZoneType, geoZoneMapping, geoZonePrimaryKeyColumns)
	geoZoneInsertCacheMut       sync.RWMutex
	geoZoneInsertCache          = make(map[string]insertCache)
	geoZoneUpdateCacheMut       sync.RWMutex
	geoZoneUpdateCache          = make(map[string]updateCache)
	geoZoneUpsertCacheMut       sync.RWMutex
	geoZoneUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var geoZoneBeforeInsertHooks []GeoZoneHook
var geoZoneBeforeUpdateHooks []GeoZoneHook
var geoZoneBeforeDeleteHooks []GeoZoneHook
var geoZoneBeforeUpsertHooks []GeoZoneHook

var geoZoneAfterInsertHooks []GeoZoneHook
var geoZoneAfterSelectHooks []GeoZoneHook
var geoZoneAfterUpdateHooks []GeoZoneHook
var geoZoneAfterDeleteHooks []GeoZoneHook
var geoZoneAfterUpsertHooks []GeoZoneHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GeoZone) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GeoZone) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GeoZone) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GeoZone) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GeoZone) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GeoZone) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GeoZone) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GeoZone) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GeoZone) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGeoZoneHook registers your hook function for all future operations.
func AddGeoZoneHook(hookPoint boil.HookPoint, geoZoneHook GeoZoneHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		geoZoneBeforeInsertHooks = append(geoZoneBeforeInsertHooks, geoZoneHook)
	case boil.BeforeUpdateHook:
		geoZoneBeforeUpdateHooks = append(geoZoneBeforeUpdateHooks, geoZoneHook)
	case boil.BeforeDeleteHook:
		geoZoneBeforeDeleteHooks = append(geoZoneBeforeDeleteHooks, geoZoneHook)
	case boil.BeforeUpsertHook:
		geoZoneBeforeUpsertHooks = append(geoZoneBeforeUpsertHooks, geoZoneHook)
	case boil.AfterInsertHook:
		geoZoneAfterInsertHooks = append(geoZoneAfterInsertHooks, geoZoneHook)
	case boil.AfterSelectHook:
		geoZoneAfterSelectHooks = append(geoZoneAfterSelectHooks, geoZoneHook)
	case boil.AfterUpdateHook:
		geoZoneAfterUpdateHooks = append(geoZoneAfterUpdateHooks, geoZoneHook)
	case boil.AfterDeleteHook:
		geoZoneAfterDeleteHooks = append(geoZoneAfterDeleteHooks, geoZoneHook)
	case boil.AfterUpsertHook:
		geoZoneAfterUpsertHooks = append(geoZoneAfterUpsertHooks, geoZoneHook)
	}
}

// OneP returns a single geoZone record from the query, and panics on error.
func (q geoZoneQuery) OneP() *GeoZone {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single geoZone record from the query.
func (q geoZoneQuery) One() (*GeoZone, error) {
	o := &GeoZone{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for geo_zone")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all GeoZone records from the query, and panics on error.
func (q geoZoneQuery) AllP() GeoZoneSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all GeoZone records from the query.
func (q geoZoneQuery) All() (GeoZoneSlice, error) {
	var o []*GeoZone

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GeoZone slice")
	}

	if len(geoZoneAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all GeoZone records in the query, and panics on error.
func (q geoZoneQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all GeoZone records in the query.
func (q geoZoneQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count geo_zone rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q geoZoneQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q geoZoneQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if geo_zone exists")
	}

	return count > 0, nil
}

// GeoZoneMatricesG retrieves all the geo_zone_matrix's geo zone matrix.
func (o *GeoZone) GeoZoneMatricesG(mods ...qm.QueryMod) geoZoneMatrixQuery {
	return o.GeoZoneMatrices(boil.GetDB(), mods...)
}

// GeoZoneMatrices retrieves all the geo_zone_matrix's geo zone matrix with an executor.
func (o *GeoZone) GeoZoneMatrices(exec boil.Executor, mods ...qm.QueryMod) geoZoneMatrixQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`geo_zone_id`=?", o.ID),
	)

	query := GeoZoneMatrices(exec, queryMods...)
	queries.SetFrom(query.Query, "`geo_zone_matrix` as `a`")
	return query
}

// TaxRatesG retrieves all the tax_rate's tax rate.
func (o *GeoZone) TaxRatesG(mods ...qm.QueryMod) taxRateQuery {
	return o.TaxRates(boil.GetDB(), mods...)
}

// TaxRates retrieves all the tax_rate's tax rate with an executor.
func (o *GeoZone) TaxRates(exec boil.Executor, mods ...qm.QueryMod) taxRateQuery {
	queryMods := []qm.QueryMod{
		qm.Select("`a`.*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`a`.`geo_zone_id`=?", o.ID),
	)

	query := TaxRates(exec, queryMods...)
	queries.SetFrom(query.Query, "`tax_rate` as `a`")
	return query
}

// LoadGeoZoneMatrices allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (geoZoneL) LoadGeoZoneMatrices(e boil.Executor, singular bool, maybeGeoZone interface{}) error {
	var slice []*GeoZone
	var object *GeoZone

	count := 1
	if singular {
		object = maybeGeoZone.(*GeoZone)
	} else {
		slice = *maybeGeoZone.(*[]*GeoZone)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &geoZoneR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &geoZoneR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `geo_zone_matrix` where `geo_zone_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load geo_zone_matrix")
	}
	defer results.Close()

	var resultSlice []*GeoZoneMatrix
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice geo_zone_matrix")
	}

	if len(geoZoneMatrixAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.GeoZoneMatrices = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GeoZoneID {
				local.R.GeoZoneMatrices = append(local.R.GeoZoneMatrices, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTaxRates allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (geoZoneL) LoadTaxRates(e boil.Executor, singular bool, maybeGeoZone interface{}) error {
	var slice []*GeoZone
	var object *GeoZone

	count := 1
	if singular {
		object = maybeGeoZone.(*GeoZone)
	} else {
		slice = *maybeGeoZone.(*[]*GeoZone)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &geoZoneR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &geoZoneR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from `tax_rate` where `geo_zone_id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tax_rate")
	}
	defer results.Close()

	var resultSlice []*TaxRate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tax_rate")
	}

	if len(taxRateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TaxRates = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.GeoZoneID {
				local.R.TaxRates = append(local.R.TaxRates, foreign)
				break
			}
		}
	}

	return nil
}

// AddGeoZoneMatricesG adds the given related objects to the existing relationships
// of the geo_zone, optionally inserting them as new records.
// Appends related to o.R.GeoZoneMatrices.
// Sets related.R.GeoZone appropriately.
// Uses the global database handle.
func (o *GeoZone) AddGeoZoneMatricesG(insert bool, related ...*GeoZoneMatrix) error {
	return o.AddGeoZoneMatrices(boil.GetDB(), insert, related...)
}

// AddGeoZoneMatricesP adds the given related objects to the existing relationships
// of the geo_zone, optionally inserting them as new records.
// Appends related to o.R.GeoZoneMatrices.
// Sets related.R.GeoZone appropriately.
// Panics on error.
func (o *GeoZone) AddGeoZoneMatricesP(exec boil.Executor, insert bool, related ...*GeoZoneMatrix) {
	if err := o.AddGeoZoneMatrices(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGeoZoneMatricesGP adds the given related objects to the existing relationships
// of the geo_zone, optionally inserting them as new records.
// Appends related to o.R.GeoZoneMatrices.
// Sets related.R.GeoZone appropriately.
// Uses the global database handle and panics on error.
func (o *GeoZone) AddGeoZoneMatricesGP(insert bool, related ...*GeoZoneMatrix) {
	if err := o.AddGeoZoneMatrices(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddGeoZoneMatrices adds the given related objects to the existing relationships
// of the geo_zone, optionally inserting them as new records.
// Appends related to o.R.GeoZoneMatrices.
// Sets related.R.GeoZone appropriately.
func (o *GeoZone) AddGeoZoneMatrices(exec boil.Executor, insert bool, related ...*GeoZoneMatrix) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GeoZoneID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `geo_zone_matrix` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"geo_zone_id"}),
				strmangle.WhereClause("`", "`", 0, geoZoneMatrixPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GeoZoneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &geoZoneR{
			GeoZoneMatrices: related,
		}
	} else {
		o.R.GeoZoneMatrices = append(o.R.GeoZoneMatrices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &geoZoneMatrixR{
				GeoZone: o,
			}
		} else {
			rel.R.GeoZone = o
		}
	}
	return nil
}

// AddTaxRatesG adds the given related objects to the existing relationships
// of the geo_zone, optionally inserting them as new records.
// Appends related to o.R.TaxRates.
// Sets related.R.GeoZone appropriately.
// Uses the global database handle.
func (o *GeoZone) AddTaxRatesG(insert bool, related ...*TaxRate) error {
	return o.AddTaxRates(boil.GetDB(), insert, related...)
}

// AddTaxRatesP adds the given related objects to the existing relationships
// of the geo_zone, optionally inserting them as new records.
// Appends related to o.R.TaxRates.
// Sets related.R.GeoZone appropriately.
// Panics on error.
func (o *GeoZone) AddTaxRatesP(exec boil.Executor, insert bool, related ...*TaxRate) {
	if err := o.AddTaxRates(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTaxRatesGP adds the given related objects to the existing relationships
// of the geo_zone, optionally inserting them as new records.
// Appends related to o.R.TaxRates.
// Sets related.R.GeoZone appropriately.
// Uses the global database handle and panics on error.
func (o *GeoZone) AddTaxRatesGP(insert bool, related ...*TaxRate) {
	if err := o.AddTaxRates(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTaxRates adds the given related objects to the existing relationships
// of the geo_zone, optionally inserting them as new records.
// Appends related to o.R.TaxRates.
// Sets related.R.GeoZone appropriately.
func (o *GeoZone) AddTaxRates(exec boil.Executor, insert bool, related ...*TaxRate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.GeoZoneID = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `tax_rate` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"geo_zone_id"}),
				strmangle.WhereClause("`", "`", 0, taxRatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.GeoZoneID = o.ID
		}
	}

	if o.R == nil {
		o.R = &geoZoneR{
			TaxRates: related,
		}
	} else {
		o.R.TaxRates = append(o.R.TaxRates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &taxRateR{
				GeoZone: o,
			}
		} else {
			rel.R.GeoZone = o
		}
	}
	return nil
}

// GeoZonesG retrieves all records.
func GeoZonesG(mods ...qm.QueryMod) geoZoneQuery {
	return GeoZones(boil.GetDB(), mods...)
}

// GeoZones retrieves all the records using an executor.
func GeoZones(exec boil.Executor, mods ...qm.QueryMod) geoZoneQuery {
	mods = append(mods, qm.From("`geo_zone`"))
	return geoZoneQuery{NewQuery(exec, mods...)}
}

// FindGeoZoneG retrieves a single record by ID.
func FindGeoZoneG(id int, selectCols ...string) (*GeoZone, error) {
	return FindGeoZone(boil.GetDB(), id, selectCols...)
}

// FindGeoZoneGP retrieves a single record by ID, and panics on error.
func FindGeoZoneGP(id int, selectCols ...string) *GeoZone {
	retobj, err := FindGeoZone(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindGeoZone retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGeoZone(exec boil.Executor, id int, selectCols ...string) (*GeoZone, error) {
	geoZoneObj := &GeoZone{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `geo_zone` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(geoZoneObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from geo_zone")
	}

	return geoZoneObj, nil
}

// FindGeoZoneP retrieves a single record by ID with an executor, and panics on error.
func FindGeoZoneP(exec boil.Executor, id int, selectCols ...string) *GeoZone {
	retobj, err := FindGeoZone(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *GeoZone) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *GeoZone) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *GeoZone) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *GeoZone) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no geo_zone provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(geoZoneColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	geoZoneInsertCacheMut.RLock()
	cache, cached := geoZoneInsertCache[key]
	geoZoneInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			geoZoneColumns,
			geoZoneColumnsWithDefault,
			geoZoneColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(geoZoneType, geoZoneMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(geoZoneType, geoZoneMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `geo_zone` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `geo_zone` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `geo_zone` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, geoZonePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into geo_zone")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == geoZoneMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for geo_zone")
	}

CacheNoHooks:
	if !cached {
		geoZoneInsertCacheMut.Lock()
		geoZoneInsertCache[key] = cache
		geoZoneInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single GeoZone record. See Update for
// whitelist behavior description.
func (o *GeoZone) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single GeoZone record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *GeoZone) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the GeoZone, and panics on error.
// See Update for whitelist behavior description.
func (o *GeoZone) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the GeoZone.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *GeoZone) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	geoZoneUpdateCacheMut.RLock()
	cache, cached := geoZoneUpdateCache[key]
	geoZoneUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			geoZoneColumns,
			geoZonePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update geo_zone, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `geo_zone` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, geoZonePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(geoZoneType, geoZoneMapping, append(wl, geoZonePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update geo_zone row")
	}

	if !cached {
		geoZoneUpdateCacheMut.Lock()
		geoZoneUpdateCache[key] = cache
		geoZoneUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q geoZoneQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q geoZoneQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for geo_zone")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GeoZoneSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o GeoZoneSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o GeoZoneSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GeoZoneSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geoZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `geo_zone` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, geoZonePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in geoZone slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *GeoZone) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *GeoZone) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *GeoZone) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *GeoZone) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no geo_zone provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(geoZoneColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	geoZoneUpsertCacheMut.RLock()
	cache, cached := geoZoneUpsertCache[key]
	geoZoneUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			geoZoneColumns,
			geoZoneColumnsWithDefault,
			geoZoneColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			geoZoneColumns,
			geoZonePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert geo_zone, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "geo_zone", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `geo_zone` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(geoZoneType, geoZoneMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(geoZoneType, geoZoneMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for geo_zone")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == geoZoneMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for geo_zone")
	}

CacheNoHooks:
	if !cached {
		geoZoneUpsertCacheMut.Lock()
		geoZoneUpsertCache[key] = cache
		geoZoneUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single GeoZone record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *GeoZone) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single GeoZone record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *GeoZone) DeleteG() error {
	if o == nil {
		return errors.New("models: no GeoZone provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single GeoZone record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *GeoZone) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single GeoZone record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GeoZone) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no GeoZone provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), geoZonePrimaryKeyMapping)
	sql := "DELETE FROM `geo_zone` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from geo_zone")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q geoZoneQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q geoZoneQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no geoZoneQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from geo_zone")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o GeoZoneSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o GeoZoneSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no GeoZone slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o GeoZoneSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GeoZoneSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no GeoZone slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(geoZoneBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geoZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `geo_zone` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, geoZonePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from geoZone slice")
	}

	if len(geoZoneAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *GeoZone) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *GeoZone) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *GeoZone) ReloadG() error {
	if o == nil {
		return errors.New("models: no GeoZone provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GeoZone) Reload(exec boil.Executor) error {
	ret, err := FindGeoZone(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GeoZoneSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GeoZoneSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GeoZoneSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty GeoZoneSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GeoZoneSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	geoZones := GeoZoneSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geoZonePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `geo_zone`.* FROM `geo_zone` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, geoZonePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&geoZones)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GeoZoneSlice")
	}

	*o = geoZones

	return nil
}

// GeoZoneExists checks if the GeoZone row exists.
func GeoZoneExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `geo_zone` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if geo_zone exists")
	}

	return exists, nil
}

// GeoZoneExistsG checks if the GeoZone row exists.
func GeoZoneExistsG(id int) (bool, error) {
	return GeoZoneExists(boil.GetDB(), id)
}

// GeoZoneExistsGP checks if the GeoZone row exists. Panics on error.
func GeoZoneExistsGP(id int) bool {
	e, err := GeoZoneExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// GeoZoneExistsP checks if the GeoZone row exists. Panics on error.
func GeoZoneExistsP(exec boil.Executor, id int) bool {
	e, err := GeoZoneExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
