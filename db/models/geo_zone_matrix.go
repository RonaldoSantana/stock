// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
	"gopkg.in/nullbio/null.v6"
)

// GeoZoneMatrix is an object representing the database table.
type GeoZoneMatrix struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CountryID int       `boil:"country_id" json:"country_id" toml:"country_id" yaml:"country_id"`
	RegionID  null.Int  `boil:"region_id" json:"region_id,omitempty" toml:"region_id" yaml:"region_id,omitempty"`
	GeoZoneID int       `boil:"geo_zone_id" json:"geo_zone_id" toml:"geo_zone_id" yaml:"geo_zone_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *geoZoneMatrixR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L geoZoneMatrixL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// geoZoneMatrixR is where relationships are stored.
type geoZoneMatrixR struct {
	Country *Country
	GeoZone *GeoZone
	Region  *Region
}

// geoZoneMatrixL is where Load methods for each relationship are stored.
type geoZoneMatrixL struct{}

var (
	geoZoneMatrixColumns               = []string{"id", "country_id", "region_id", "geo_zone_id", "created_at", "updated_at"}
	geoZoneMatrixColumnsWithoutDefault = []string{"country_id", "region_id", "geo_zone_id"}
	geoZoneMatrixColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	geoZoneMatrixPrimaryKeyColumns     = []string{"id"}
)

type (
	// GeoZoneMatrixSlice is an alias for a slice of pointers to GeoZoneMatrix.
	// This should generally be used opposed to []GeoZoneMatrix.
	GeoZoneMatrixSlice []*GeoZoneMatrix
	// GeoZoneMatrixHook is the signature for custom GeoZoneMatrix hook methods
	GeoZoneMatrixHook func(boil.Executor, *GeoZoneMatrix) error

	geoZoneMatrixQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	geoZoneMatrixType                 = reflect.TypeOf(&GeoZoneMatrix{})
	geoZoneMatrixMapping              = queries.MakeStructMapping(geoZoneMatrixType)
	geoZoneMatrixPrimaryKeyMapping, _ = queries.BindMapping(geoZoneMatrixType, geoZoneMatrixMapping, geoZoneMatrixPrimaryKeyColumns)
	geoZoneMatrixInsertCacheMut       sync.RWMutex
	geoZoneMatrixInsertCache          = make(map[string]insertCache)
	geoZoneMatrixUpdateCacheMut       sync.RWMutex
	geoZoneMatrixUpdateCache          = make(map[string]updateCache)
	geoZoneMatrixUpsertCacheMut       sync.RWMutex
	geoZoneMatrixUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var geoZoneMatrixBeforeInsertHooks []GeoZoneMatrixHook
var geoZoneMatrixBeforeUpdateHooks []GeoZoneMatrixHook
var geoZoneMatrixBeforeDeleteHooks []GeoZoneMatrixHook
var geoZoneMatrixBeforeUpsertHooks []GeoZoneMatrixHook

var geoZoneMatrixAfterInsertHooks []GeoZoneMatrixHook
var geoZoneMatrixAfterSelectHooks []GeoZoneMatrixHook
var geoZoneMatrixAfterUpdateHooks []GeoZoneMatrixHook
var geoZoneMatrixAfterDeleteHooks []GeoZoneMatrixHook
var geoZoneMatrixAfterUpsertHooks []GeoZoneMatrixHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GeoZoneMatrix) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneMatrixBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GeoZoneMatrix) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneMatrixBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GeoZoneMatrix) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneMatrixBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GeoZoneMatrix) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneMatrixBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GeoZoneMatrix) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneMatrixAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GeoZoneMatrix) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneMatrixAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GeoZoneMatrix) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneMatrixAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GeoZoneMatrix) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneMatrixAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GeoZoneMatrix) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range geoZoneMatrixAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGeoZoneMatrixHook registers your hook function for all future operations.
func AddGeoZoneMatrixHook(hookPoint boil.HookPoint, geoZoneMatrixHook GeoZoneMatrixHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		geoZoneMatrixBeforeInsertHooks = append(geoZoneMatrixBeforeInsertHooks, geoZoneMatrixHook)
	case boil.BeforeUpdateHook:
		geoZoneMatrixBeforeUpdateHooks = append(geoZoneMatrixBeforeUpdateHooks, geoZoneMatrixHook)
	case boil.BeforeDeleteHook:
		geoZoneMatrixBeforeDeleteHooks = append(geoZoneMatrixBeforeDeleteHooks, geoZoneMatrixHook)
	case boil.BeforeUpsertHook:
		geoZoneMatrixBeforeUpsertHooks = append(geoZoneMatrixBeforeUpsertHooks, geoZoneMatrixHook)
	case boil.AfterInsertHook:
		geoZoneMatrixAfterInsertHooks = append(geoZoneMatrixAfterInsertHooks, geoZoneMatrixHook)
	case boil.AfterSelectHook:
		geoZoneMatrixAfterSelectHooks = append(geoZoneMatrixAfterSelectHooks, geoZoneMatrixHook)
	case boil.AfterUpdateHook:
		geoZoneMatrixAfterUpdateHooks = append(geoZoneMatrixAfterUpdateHooks, geoZoneMatrixHook)
	case boil.AfterDeleteHook:
		geoZoneMatrixAfterDeleteHooks = append(geoZoneMatrixAfterDeleteHooks, geoZoneMatrixHook)
	case boil.AfterUpsertHook:
		geoZoneMatrixAfterUpsertHooks = append(geoZoneMatrixAfterUpsertHooks, geoZoneMatrixHook)
	}
}

// OneP returns a single geoZoneMatrix record from the query, and panics on error.
func (q geoZoneMatrixQuery) OneP() *GeoZoneMatrix {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single geoZoneMatrix record from the query.
func (q geoZoneMatrixQuery) One() (*GeoZoneMatrix, error) {
	o := &GeoZoneMatrix{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for geo_zone_matrix")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all GeoZoneMatrix records from the query, and panics on error.
func (q geoZoneMatrixQuery) AllP() GeoZoneMatrixSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all GeoZoneMatrix records from the query.
func (q geoZoneMatrixQuery) All() (GeoZoneMatrixSlice, error) {
	var o []*GeoZoneMatrix

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GeoZoneMatrix slice")
	}

	if len(geoZoneMatrixAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all GeoZoneMatrix records in the query, and panics on error.
func (q geoZoneMatrixQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all GeoZoneMatrix records in the query.
func (q geoZoneMatrixQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count geo_zone_matrix rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q geoZoneMatrixQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q geoZoneMatrixQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if geo_zone_matrix exists")
	}

	return count > 0, nil
}

// CountryG pointed to by the foreign key.
func (o *GeoZoneMatrix) CountryG(mods ...qm.QueryMod) countryQuery {
	return o.Country(boil.GetDB(), mods...)
}

// Country pointed to by the foreign key.
func (o *GeoZoneMatrix) Country(exec boil.Executor, mods ...qm.QueryMod) countryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.CountryID),
	}

	queryMods = append(queryMods, mods...)

	query := Countries(exec, queryMods...)
	queries.SetFrom(query.Query, "`country`")

	return query
}

// GeoZoneG pointed to by the foreign key.
func (o *GeoZoneMatrix) GeoZoneG(mods ...qm.QueryMod) geoZoneQuery {
	return o.GeoZone(boil.GetDB(), mods...)
}

// GeoZone pointed to by the foreign key.
func (o *GeoZoneMatrix) GeoZone(exec boil.Executor, mods ...qm.QueryMod) geoZoneQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GeoZoneID),
	}

	queryMods = append(queryMods, mods...)

	query := GeoZones(exec, queryMods...)
	queries.SetFrom(query.Query, "`geo_zone`")

	return query
}

// RegionG pointed to by the foreign key.
func (o *GeoZoneMatrix) RegionG(mods ...qm.QueryMod) regionQuery {
	return o.Region(boil.GetDB(), mods...)
}

// Region pointed to by the foreign key.
func (o *GeoZoneMatrix) Region(exec boil.Executor, mods ...qm.QueryMod) regionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.RegionID),
	}

	queryMods = append(queryMods, mods...)

	query := Regions(exec, queryMods...)
	queries.SetFrom(query.Query, "`region`")

	return query
} // LoadCountry allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (geoZoneMatrixL) LoadCountry(e boil.Executor, singular bool, maybeGeoZoneMatrix interface{}) error {
	var slice []*GeoZoneMatrix
	var object *GeoZoneMatrix

	count := 1
	if singular {
		object = maybeGeoZoneMatrix.(*GeoZoneMatrix)
	} else {
		slice = *maybeGeoZoneMatrix.(*[]*GeoZoneMatrix)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &geoZoneMatrixR{}
		}
		args[0] = object.CountryID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &geoZoneMatrixR{}
			}
			args[i] = obj.CountryID
		}
	}

	query := fmt.Sprintf(
		"select * from `country` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Country")
	}
	defer results.Close()

	var resultSlice []*Country
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Country")
	}

	if len(geoZoneMatrixAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Country = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CountryID == foreign.ID {
				local.R.Country = foreign
				break
			}
		}
	}

	return nil
}

// LoadGeoZone allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (geoZoneMatrixL) LoadGeoZone(e boil.Executor, singular bool, maybeGeoZoneMatrix interface{}) error {
	var slice []*GeoZoneMatrix
	var object *GeoZoneMatrix

	count := 1
	if singular {
		object = maybeGeoZoneMatrix.(*GeoZoneMatrix)
	} else {
		slice = *maybeGeoZoneMatrix.(*[]*GeoZoneMatrix)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &geoZoneMatrixR{}
		}
		args[0] = object.GeoZoneID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &geoZoneMatrixR{}
			}
			args[i] = obj.GeoZoneID
		}
	}

	query := fmt.Sprintf(
		"select * from `geo_zone` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GeoZone")
	}
	defer results.Close()

	var resultSlice []*GeoZone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GeoZone")
	}

	if len(geoZoneMatrixAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.GeoZone = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GeoZoneID == foreign.ID {
				local.R.GeoZone = foreign
				break
			}
		}
	}

	return nil
}

// LoadRegion allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (geoZoneMatrixL) LoadRegion(e boil.Executor, singular bool, maybeGeoZoneMatrix interface{}) error {
	var slice []*GeoZoneMatrix
	var object *GeoZoneMatrix

	count := 1
	if singular {
		object = maybeGeoZoneMatrix.(*GeoZoneMatrix)
	} else {
		slice = *maybeGeoZoneMatrix.(*[]*GeoZoneMatrix)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &geoZoneMatrixR{}
		}
		args[0] = object.RegionID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &geoZoneMatrixR{}
			}
			args[i] = obj.RegionID
		}
	}

	query := fmt.Sprintf(
		"select * from `region` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Region")
	}
	defer results.Close()

	var resultSlice []*Region
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Region")
	}

	if len(geoZoneMatrixAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Region = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RegionID.Int == foreign.ID {
				local.R.Region = foreign
				break
			}
		}
	}

	return nil
}

// SetCountryG of the geo_zone_matrix to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.GeoZoneMatrices.
// Uses the global database handle.
func (o *GeoZoneMatrix) SetCountryG(insert bool, related *Country) error {
	return o.SetCountry(boil.GetDB(), insert, related)
}

// SetCountryP of the geo_zone_matrix to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.GeoZoneMatrices.
// Panics on error.
func (o *GeoZoneMatrix) SetCountryP(exec boil.Executor, insert bool, related *Country) {
	if err := o.SetCountry(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCountryGP of the geo_zone_matrix to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.GeoZoneMatrices.
// Uses the global database handle and panics on error.
func (o *GeoZoneMatrix) SetCountryGP(insert bool, related *Country) {
	if err := o.SetCountry(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCountry of the geo_zone_matrix to the related item.
// Sets o.R.Country to related.
// Adds o to related.R.GeoZoneMatrices.
func (o *GeoZoneMatrix) SetCountry(exec boil.Executor, insert bool, related *Country) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `geo_zone_matrix` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"country_id"}),
		strmangle.WhereClause("`", "`", 0, geoZoneMatrixPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CountryID = related.ID

	if o.R == nil {
		o.R = &geoZoneMatrixR{
			Country: related,
		}
	} else {
		o.R.Country = related
	}

	if related.R == nil {
		related.R = &countryR{
			GeoZoneMatrices: GeoZoneMatrixSlice{o},
		}
	} else {
		related.R.GeoZoneMatrices = append(related.R.GeoZoneMatrices, o)
	}

	return nil
}

// SetGeoZoneG of the geo_zone_matrix to the related item.
// Sets o.R.GeoZone to related.
// Adds o to related.R.GeoZoneMatrices.
// Uses the global database handle.
func (o *GeoZoneMatrix) SetGeoZoneG(insert bool, related *GeoZone) error {
	return o.SetGeoZone(boil.GetDB(), insert, related)
}

// SetGeoZoneP of the geo_zone_matrix to the related item.
// Sets o.R.GeoZone to related.
// Adds o to related.R.GeoZoneMatrices.
// Panics on error.
func (o *GeoZoneMatrix) SetGeoZoneP(exec boil.Executor, insert bool, related *GeoZone) {
	if err := o.SetGeoZone(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGeoZoneGP of the geo_zone_matrix to the related item.
// Sets o.R.GeoZone to related.
// Adds o to related.R.GeoZoneMatrices.
// Uses the global database handle and panics on error.
func (o *GeoZoneMatrix) SetGeoZoneGP(insert bool, related *GeoZone) {
	if err := o.SetGeoZone(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGeoZone of the geo_zone_matrix to the related item.
// Sets o.R.GeoZone to related.
// Adds o to related.R.GeoZoneMatrices.
func (o *GeoZoneMatrix) SetGeoZone(exec boil.Executor, insert bool, related *GeoZone) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `geo_zone_matrix` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"geo_zone_id"}),
		strmangle.WhereClause("`", "`", 0, geoZoneMatrixPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GeoZoneID = related.ID

	if o.R == nil {
		o.R = &geoZoneMatrixR{
			GeoZone: related,
		}
	} else {
		o.R.GeoZone = related
	}

	if related.R == nil {
		related.R = &geoZoneR{
			GeoZoneMatrices: GeoZoneMatrixSlice{o},
		}
	} else {
		related.R.GeoZoneMatrices = append(related.R.GeoZoneMatrices, o)
	}

	return nil
}

// SetRegionG of the geo_zone_matrix to the related item.
// Sets o.R.Region to related.
// Adds o to related.R.GeoZoneMatrices.
// Uses the global database handle.
func (o *GeoZoneMatrix) SetRegionG(insert bool, related *Region) error {
	return o.SetRegion(boil.GetDB(), insert, related)
}

// SetRegionP of the geo_zone_matrix to the related item.
// Sets o.R.Region to related.
// Adds o to related.R.GeoZoneMatrices.
// Panics on error.
func (o *GeoZoneMatrix) SetRegionP(exec boil.Executor, insert bool, related *Region) {
	if err := o.SetRegion(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRegionGP of the geo_zone_matrix to the related item.
// Sets o.R.Region to related.
// Adds o to related.R.GeoZoneMatrices.
// Uses the global database handle and panics on error.
func (o *GeoZoneMatrix) SetRegionGP(insert bool, related *Region) {
	if err := o.SetRegion(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRegion of the geo_zone_matrix to the related item.
// Sets o.R.Region to related.
// Adds o to related.R.GeoZoneMatrices.
func (o *GeoZoneMatrix) SetRegion(exec boil.Executor, insert bool, related *Region) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `geo_zone_matrix` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"region_id"}),
		strmangle.WhereClause("`", "`", 0, geoZoneMatrixPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RegionID.Int = related.ID
	o.RegionID.Valid = true

	if o.R == nil {
		o.R = &geoZoneMatrixR{
			Region: related,
		}
	} else {
		o.R.Region = related
	}

	if related.R == nil {
		related.R = &regionR{
			GeoZoneMatrices: GeoZoneMatrixSlice{o},
		}
	} else {
		related.R.GeoZoneMatrices = append(related.R.GeoZoneMatrices, o)
	}

	return nil
}

// RemoveRegionG relationship.
// Sets o.R.Region to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *GeoZoneMatrix) RemoveRegionG(related *Region) error {
	return o.RemoveRegion(boil.GetDB(), related)
}

// RemoveRegionP relationship.
// Sets o.R.Region to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *GeoZoneMatrix) RemoveRegionP(exec boil.Executor, related *Region) {
	if err := o.RemoveRegion(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRegionGP relationship.
// Sets o.R.Region to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *GeoZoneMatrix) RemoveRegionGP(related *Region) {
	if err := o.RemoveRegion(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRegion relationship.
// Sets o.R.Region to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *GeoZoneMatrix) RemoveRegion(exec boil.Executor, related *Region) error {
	var err error

	o.RegionID.Valid = false
	if err = o.Update(exec, "region_id"); err != nil {
		o.RegionID.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Region = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.GeoZoneMatrices {
		if o.RegionID.Int != ri.RegionID.Int {
			continue
		}

		ln := len(related.R.GeoZoneMatrices)
		if ln > 1 && i < ln-1 {
			related.R.GeoZoneMatrices[i] = related.R.GeoZoneMatrices[ln-1]
		}
		related.R.GeoZoneMatrices = related.R.GeoZoneMatrices[:ln-1]
		break
	}
	return nil
}

// GeoZoneMatricesG retrieves all records.
func GeoZoneMatricesG(mods ...qm.QueryMod) geoZoneMatrixQuery {
	return GeoZoneMatrices(boil.GetDB(), mods...)
}

// GeoZoneMatrices retrieves all the records using an executor.
func GeoZoneMatrices(exec boil.Executor, mods ...qm.QueryMod) geoZoneMatrixQuery {
	mods = append(mods, qm.From("`geo_zone_matrix`"))
	return geoZoneMatrixQuery{NewQuery(exec, mods...)}
}

// FindGeoZoneMatrixG retrieves a single record by ID.
func FindGeoZoneMatrixG(id int, selectCols ...string) (*GeoZoneMatrix, error) {
	return FindGeoZoneMatrix(boil.GetDB(), id, selectCols...)
}

// FindGeoZoneMatrixGP retrieves a single record by ID, and panics on error.
func FindGeoZoneMatrixGP(id int, selectCols ...string) *GeoZoneMatrix {
	retobj, err := FindGeoZoneMatrix(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindGeoZoneMatrix retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGeoZoneMatrix(exec boil.Executor, id int, selectCols ...string) (*GeoZoneMatrix, error) {
	geoZoneMatrixObj := &GeoZoneMatrix{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `geo_zone_matrix` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(geoZoneMatrixObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from geo_zone_matrix")
	}

	return geoZoneMatrixObj, nil
}

// FindGeoZoneMatrixP retrieves a single record by ID with an executor, and panics on error.
func FindGeoZoneMatrixP(exec boil.Executor, id int, selectCols ...string) *GeoZoneMatrix {
	retobj, err := FindGeoZoneMatrix(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *GeoZoneMatrix) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *GeoZoneMatrix) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *GeoZoneMatrix) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *GeoZoneMatrix) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no geo_zone_matrix provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(geoZoneMatrixColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	geoZoneMatrixInsertCacheMut.RLock()
	cache, cached := geoZoneMatrixInsertCache[key]
	geoZoneMatrixInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			geoZoneMatrixColumns,
			geoZoneMatrixColumnsWithDefault,
			geoZoneMatrixColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(geoZoneMatrixType, geoZoneMatrixMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(geoZoneMatrixType, geoZoneMatrixMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `geo_zone_matrix` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `geo_zone_matrix` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `geo_zone_matrix` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, geoZoneMatrixPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into geo_zone_matrix")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == geoZoneMatrixMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for geo_zone_matrix")
	}

CacheNoHooks:
	if !cached {
		geoZoneMatrixInsertCacheMut.Lock()
		geoZoneMatrixInsertCache[key] = cache
		geoZoneMatrixInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single GeoZoneMatrix record. See Update for
// whitelist behavior description.
func (o *GeoZoneMatrix) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single GeoZoneMatrix record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *GeoZoneMatrix) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the GeoZoneMatrix, and panics on error.
// See Update for whitelist behavior description.
func (o *GeoZoneMatrix) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the GeoZoneMatrix.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *GeoZoneMatrix) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	geoZoneMatrixUpdateCacheMut.RLock()
	cache, cached := geoZoneMatrixUpdateCache[key]
	geoZoneMatrixUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			geoZoneMatrixColumns,
			geoZoneMatrixPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update geo_zone_matrix, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `geo_zone_matrix` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, geoZoneMatrixPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(geoZoneMatrixType, geoZoneMatrixMapping, append(wl, geoZoneMatrixPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update geo_zone_matrix row")
	}

	if !cached {
		geoZoneMatrixUpdateCacheMut.Lock()
		geoZoneMatrixUpdateCache[key] = cache
		geoZoneMatrixUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q geoZoneMatrixQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q geoZoneMatrixQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for geo_zone_matrix")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GeoZoneMatrixSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o GeoZoneMatrixSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o GeoZoneMatrixSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GeoZoneMatrixSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geoZoneMatrixPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `geo_zone_matrix` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, geoZoneMatrixPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in geoZoneMatrix slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *GeoZoneMatrix) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *GeoZoneMatrix) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *GeoZoneMatrix) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *GeoZoneMatrix) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no geo_zone_matrix provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(geoZoneMatrixColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	geoZoneMatrixUpsertCacheMut.RLock()
	cache, cached := geoZoneMatrixUpsertCache[key]
	geoZoneMatrixUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			geoZoneMatrixColumns,
			geoZoneMatrixColumnsWithDefault,
			geoZoneMatrixColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			geoZoneMatrixColumns,
			geoZoneMatrixPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert geo_zone_matrix, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "geo_zone_matrix", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `geo_zone_matrix` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(geoZoneMatrixType, geoZoneMatrixMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(geoZoneMatrixType, geoZoneMatrixMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for geo_zone_matrix")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == geoZoneMatrixMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for geo_zone_matrix")
	}

CacheNoHooks:
	if !cached {
		geoZoneMatrixUpsertCacheMut.Lock()
		geoZoneMatrixUpsertCache[key] = cache
		geoZoneMatrixUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single GeoZoneMatrix record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *GeoZoneMatrix) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single GeoZoneMatrix record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *GeoZoneMatrix) DeleteG() error {
	if o == nil {
		return errors.New("models: no GeoZoneMatrix provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single GeoZoneMatrix record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *GeoZoneMatrix) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single GeoZoneMatrix record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GeoZoneMatrix) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no GeoZoneMatrix provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), geoZoneMatrixPrimaryKeyMapping)
	sql := "DELETE FROM `geo_zone_matrix` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from geo_zone_matrix")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q geoZoneMatrixQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q geoZoneMatrixQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no geoZoneMatrixQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from geo_zone_matrix")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o GeoZoneMatrixSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o GeoZoneMatrixSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no GeoZoneMatrix slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o GeoZoneMatrixSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GeoZoneMatrixSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no GeoZoneMatrix slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(geoZoneMatrixBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geoZoneMatrixPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `geo_zone_matrix` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, geoZoneMatrixPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from geoZoneMatrix slice")
	}

	if len(geoZoneMatrixAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *GeoZoneMatrix) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *GeoZoneMatrix) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *GeoZoneMatrix) ReloadG() error {
	if o == nil {
		return errors.New("models: no GeoZoneMatrix provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GeoZoneMatrix) Reload(exec boil.Executor) error {
	ret, err := FindGeoZoneMatrix(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GeoZoneMatrixSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *GeoZoneMatrixSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GeoZoneMatrixSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty GeoZoneMatrixSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GeoZoneMatrixSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	geoZoneMatrices := GeoZoneMatrixSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geoZoneMatrixPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `geo_zone_matrix`.* FROM `geo_zone_matrix` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, geoZoneMatrixPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&geoZoneMatrices)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GeoZoneMatrixSlice")
	}

	*o = geoZoneMatrices

	return nil
}

// GeoZoneMatrixExists checks if the GeoZoneMatrix row exists.
func GeoZoneMatrixExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `geo_zone_matrix` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if geo_zone_matrix exists")
	}

	return exists, nil
}

// GeoZoneMatrixExistsG checks if the GeoZoneMatrix row exists.
func GeoZoneMatrixExistsG(id int) (bool, error) {
	return GeoZoneMatrixExists(boil.GetDB(), id)
}

// GeoZoneMatrixExistsGP checks if the GeoZoneMatrix row exists. Panics on error.
func GeoZoneMatrixExistsGP(id int) bool {
	e, err := GeoZoneMatrixExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// GeoZoneMatrixExistsP checks if the GeoZoneMatrix row exists. Panics on error.
func GeoZoneMatrixExistsP(exec boil.Executor, id int) bool {
	e, err := GeoZoneMatrixExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
