// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/queries"
	"github.com/vattle/sqlboiler/queries/qm"
	"github.com/vattle/sqlboiler/strmangle"
)

// TaxRate is an object representing the database table.
type TaxRate struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	GeoZoneID int       `boil:"geo_zone_id" json:"geo_zone_id" toml:"geo_zone_id" yaml:"geo_zone_id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Rate      string    `boil:"rate" json:"rate" toml:"rate" yaml:"rate"`
	Type      string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *taxRateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L taxRateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

// taxRateR is where relationships are stored.
type taxRateR struct {
	GeoZone *GeoZone
}

// taxRateL is where Load methods for each relationship are stored.
type taxRateL struct{}

var (
	taxRateColumns               = []string{"id", "geo_zone_id", "name", "rate", "type", "created_at", "updated_at"}
	taxRateColumnsWithoutDefault = []string{"name"}
	taxRateColumnsWithDefault    = []string{"id", "geo_zone_id", "rate", "type", "created_at", "updated_at"}
	taxRatePrimaryKeyColumns     = []string{"id"}
)

type (
	// TaxRateSlice is an alias for a slice of pointers to TaxRate.
	// This should generally be used opposed to []TaxRate.
	TaxRateSlice []*TaxRate
	// TaxRateHook is the signature for custom TaxRate hook methods
	TaxRateHook func(boil.Executor, *TaxRate) error

	taxRateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	taxRateType                 = reflect.TypeOf(&TaxRate{})
	taxRateMapping              = queries.MakeStructMapping(taxRateType)
	taxRatePrimaryKeyMapping, _ = queries.BindMapping(taxRateType, taxRateMapping, taxRatePrimaryKeyColumns)
	taxRateInsertCacheMut       sync.RWMutex
	taxRateInsertCache          = make(map[string]insertCache)
	taxRateUpdateCacheMut       sync.RWMutex
	taxRateUpdateCache          = make(map[string]updateCache)
	taxRateUpsertCacheMut       sync.RWMutex
	taxRateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var taxRateBeforeInsertHooks []TaxRateHook
var taxRateBeforeUpdateHooks []TaxRateHook
var taxRateBeforeDeleteHooks []TaxRateHook
var taxRateBeforeUpsertHooks []TaxRateHook

var taxRateAfterInsertHooks []TaxRateHook
var taxRateAfterSelectHooks []TaxRateHook
var taxRateAfterUpdateHooks []TaxRateHook
var taxRateAfterDeleteHooks []TaxRateHook
var taxRateAfterUpsertHooks []TaxRateHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TaxRate) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taxRateBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TaxRate) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range taxRateBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TaxRate) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range taxRateBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TaxRate) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taxRateBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TaxRate) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taxRateAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TaxRate) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range taxRateAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TaxRate) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range taxRateAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TaxRate) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range taxRateAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TaxRate) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range taxRateAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTaxRateHook registers your hook function for all future operations.
func AddTaxRateHook(hookPoint boil.HookPoint, taxRateHook TaxRateHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		taxRateBeforeInsertHooks = append(taxRateBeforeInsertHooks, taxRateHook)
	case boil.BeforeUpdateHook:
		taxRateBeforeUpdateHooks = append(taxRateBeforeUpdateHooks, taxRateHook)
	case boil.BeforeDeleteHook:
		taxRateBeforeDeleteHooks = append(taxRateBeforeDeleteHooks, taxRateHook)
	case boil.BeforeUpsertHook:
		taxRateBeforeUpsertHooks = append(taxRateBeforeUpsertHooks, taxRateHook)
	case boil.AfterInsertHook:
		taxRateAfterInsertHooks = append(taxRateAfterInsertHooks, taxRateHook)
	case boil.AfterSelectHook:
		taxRateAfterSelectHooks = append(taxRateAfterSelectHooks, taxRateHook)
	case boil.AfterUpdateHook:
		taxRateAfterUpdateHooks = append(taxRateAfterUpdateHooks, taxRateHook)
	case boil.AfterDeleteHook:
		taxRateAfterDeleteHooks = append(taxRateAfterDeleteHooks, taxRateHook)
	case boil.AfterUpsertHook:
		taxRateAfterUpsertHooks = append(taxRateAfterUpsertHooks, taxRateHook)
	}
}

// OneP returns a single taxRate record from the query, and panics on error.
func (q taxRateQuery) OneP() *TaxRate {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single taxRate record from the query.
func (q taxRateQuery) One() (*TaxRate, error) {
	o := &TaxRate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tax_rate")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all TaxRate records from the query, and panics on error.
func (q taxRateQuery) AllP() TaxRateSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all TaxRate records from the query.
func (q taxRateQuery) All() (TaxRateSlice, error) {
	var o []*TaxRate

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TaxRate slice")
	}

	if len(taxRateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all TaxRate records in the query, and panics on error.
func (q taxRateQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all TaxRate records in the query.
func (q taxRateQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tax_rate rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q taxRateQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q taxRateQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tax_rate exists")
	}

	return count > 0, nil
}

// GeoZoneG pointed to by the foreign key.
func (o *TaxRate) GeoZoneG(mods ...qm.QueryMod) geoZoneQuery {
	return o.GeoZone(boil.GetDB(), mods...)
}

// GeoZone pointed to by the foreign key.
func (o *TaxRate) GeoZone(exec boil.Executor, mods ...qm.QueryMod) geoZoneQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.GeoZoneID),
	}

	queryMods = append(queryMods, mods...)

	query := GeoZones(exec, queryMods...)
	queries.SetFrom(query.Query, "`geo_zone`")

	return query
} // LoadGeoZone allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (taxRateL) LoadGeoZone(e boil.Executor, singular bool, maybeTaxRate interface{}) error {
	var slice []*TaxRate
	var object *TaxRate

	count := 1
	if singular {
		object = maybeTaxRate.(*TaxRate)
	} else {
		slice = *maybeTaxRate.(*[]*TaxRate)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &taxRateR{}
		}
		args[0] = object.GeoZoneID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &taxRateR{}
			}
			args[i] = obj.GeoZoneID
		}
	}

	query := fmt.Sprintf(
		"select * from `geo_zone` where `id` in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load GeoZone")
	}
	defer results.Close()

	var resultSlice []*GeoZone
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice GeoZone")
	}

	if len(taxRateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.GeoZone = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GeoZoneID == foreign.ID {
				local.R.GeoZone = foreign
				break
			}
		}
	}

	return nil
}

// SetGeoZoneG of the tax_rate to the related item.
// Sets o.R.GeoZone to related.
// Adds o to related.R.TaxRates.
// Uses the global database handle.
func (o *TaxRate) SetGeoZoneG(insert bool, related *GeoZone) error {
	return o.SetGeoZone(boil.GetDB(), insert, related)
}

// SetGeoZoneP of the tax_rate to the related item.
// Sets o.R.GeoZone to related.
// Adds o to related.R.TaxRates.
// Panics on error.
func (o *TaxRate) SetGeoZoneP(exec boil.Executor, insert bool, related *GeoZone) {
	if err := o.SetGeoZone(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGeoZoneGP of the tax_rate to the related item.
// Sets o.R.GeoZone to related.
// Adds o to related.R.TaxRates.
// Uses the global database handle and panics on error.
func (o *TaxRate) SetGeoZoneGP(insert bool, related *GeoZone) {
	if err := o.SetGeoZone(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetGeoZone of the tax_rate to the related item.
// Sets o.R.GeoZone to related.
// Adds o to related.R.TaxRates.
func (o *TaxRate) SetGeoZone(exec boil.Executor, insert bool, related *GeoZone) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `tax_rate` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"geo_zone_id"}),
		strmangle.WhereClause("`", "`", 0, taxRatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GeoZoneID = related.ID

	if o.R == nil {
		o.R = &taxRateR{
			GeoZone: related,
		}
	} else {
		o.R.GeoZone = related
	}

	if related.R == nil {
		related.R = &geoZoneR{
			TaxRates: TaxRateSlice{o},
		}
	} else {
		related.R.TaxRates = append(related.R.TaxRates, o)
	}

	return nil
}

// TaxRatesG retrieves all records.
func TaxRatesG(mods ...qm.QueryMod) taxRateQuery {
	return TaxRates(boil.GetDB(), mods...)
}

// TaxRates retrieves all the records using an executor.
func TaxRates(exec boil.Executor, mods ...qm.QueryMod) taxRateQuery {
	mods = append(mods, qm.From("`tax_rate`"))
	return taxRateQuery{NewQuery(exec, mods...)}
}

// FindTaxRateG retrieves a single record by ID.
func FindTaxRateG(id int, selectCols ...string) (*TaxRate, error) {
	return FindTaxRate(boil.GetDB(), id, selectCols...)
}

// FindTaxRateGP retrieves a single record by ID, and panics on error.
func FindTaxRateGP(id int, selectCols ...string) *TaxRate {
	retobj, err := FindTaxRate(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTaxRate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTaxRate(exec boil.Executor, id int, selectCols ...string) (*TaxRate, error) {
	taxRateObj := &TaxRate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `tax_rate` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(taxRateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tax_rate")
	}

	return taxRateObj, nil
}

// FindTaxRateP retrieves a single record by ID with an executor, and panics on error.
func FindTaxRateP(exec boil.Executor, id int, selectCols ...string) *TaxRate {
	retobj, err := FindTaxRate(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *TaxRate) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *TaxRate) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *TaxRate) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *TaxRate) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no tax_rate provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taxRateColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	taxRateInsertCacheMut.RLock()
	cache, cached := taxRateInsertCache[key]
	taxRateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			taxRateColumns,
			taxRateColumnsWithDefault,
			taxRateColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(taxRateType, taxRateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(taxRateType, taxRateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `tax_rate` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `tax_rate` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `tax_rate` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, taxRatePrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tax_rate")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == taxRateMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tax_rate")
	}

CacheNoHooks:
	if !cached {
		taxRateInsertCacheMut.Lock()
		taxRateInsertCache[key] = cache
		taxRateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single TaxRate record. See Update for
// whitelist behavior description.
func (o *TaxRate) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single TaxRate record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *TaxRate) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the TaxRate, and panics on error.
// See Update for whitelist behavior description.
func (o *TaxRate) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the TaxRate.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *TaxRate) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	taxRateUpdateCacheMut.RLock()
	cache, cached := taxRateUpdateCache[key]
	taxRateUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			taxRateColumns,
			taxRatePrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update tax_rate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `tax_rate` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, taxRatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(taxRateType, taxRateMapping, append(wl, taxRatePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update tax_rate row")
	}

	if !cached {
		taxRateUpdateCacheMut.Lock()
		taxRateUpdateCache[key] = cache
		taxRateUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q taxRateQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q taxRateQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for tax_rate")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TaxRateSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TaxRateSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TaxRateSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TaxRateSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `tax_rate` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taxRatePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in taxRate slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *TaxRate) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *TaxRate) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *TaxRate) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *TaxRate) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no tax_rate provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(taxRateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	taxRateUpsertCacheMut.RLock()
	cache, cached := taxRateUpsertCache[key]
	taxRateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			taxRateColumns,
			taxRateColumnsWithDefault,
			taxRateColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			taxRateColumns,
			taxRatePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert tax_rate, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "tax_rate", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `tax_rate` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(taxRateType, taxRateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(taxRateType, taxRateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for tax_rate")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == taxRateMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for tax_rate")
	}

CacheNoHooks:
	if !cached {
		taxRateUpsertCacheMut.Lock()
		taxRateUpsertCache[key] = cache
		taxRateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single TaxRate record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TaxRate) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single TaxRate record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *TaxRate) DeleteG() error {
	if o == nil {
		return errors.New("models: no TaxRate provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single TaxRate record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *TaxRate) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single TaxRate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TaxRate) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no TaxRate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), taxRatePrimaryKeyMapping)
	sql := "DELETE FROM `tax_rate` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from tax_rate")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q taxRateQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q taxRateQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no taxRateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from tax_rate")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TaxRateSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TaxRateSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no TaxRate slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TaxRateSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TaxRateSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no TaxRate slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(taxRateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `tax_rate` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taxRatePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from taxRate slice")
	}

	if len(taxRateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *TaxRate) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *TaxRate) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *TaxRate) ReloadG() error {
	if o == nil {
		return errors.New("models: no TaxRate provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TaxRate) Reload(exec boil.Executor) error {
	ret, err := FindTaxRate(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TaxRateSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TaxRateSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxRateSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty TaxRateSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TaxRateSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	taxRates := TaxRateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), taxRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `tax_rate`.* FROM `tax_rate` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, taxRatePrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&taxRates)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TaxRateSlice")
	}

	*o = taxRates

	return nil
}

// TaxRateExists checks if the TaxRate row exists.
func TaxRateExists(exec boil.Executor, id int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `tax_rate` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tax_rate exists")
	}

	return exists, nil
}

// TaxRateExistsG checks if the TaxRate row exists.
func TaxRateExistsG(id int) (bool, error) {
	return TaxRateExists(boil.GetDB(), id)
}

// TaxRateExistsGP checks if the TaxRate row exists. Panics on error.
func TaxRateExistsGP(id int) bool {
	e, err := TaxRateExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TaxRateExistsP checks if the TaxRate row exists. Panics on error.
func TaxRateExistsP(exec boil.Executor, id int) bool {
	e, err := TaxRateExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
