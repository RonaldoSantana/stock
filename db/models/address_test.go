// This file is generated by SQLBoiler (https://github.com/vattle/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// DO NOT EDIT

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/vattle/sqlboiler/boil"
	"github.com/vattle/sqlboiler/randomize"
	"github.com/vattle/sqlboiler/strmangle"
)

func testAddresses(t *testing.T) {
	t.Parallel()

	query := Addresses(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testAddressesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = address.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddressesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Addresses(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAddressesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AddressSlice{address}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testAddressesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AddressExists(tx, address.ID)
	if err != nil {
		t.Errorf("Unable to check if Address exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AddressExistsG to return true, but got false.")
	}
}
func testAddressesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	addressFound, err := FindAddress(tx, address.ID)
	if err != nil {
		t.Error(err)
	}

	if addressFound == nil {
		t.Error("want a record, got nil")
	}
}
func testAddressesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Addresses(tx).Bind(address); err != nil {
		t.Error(err)
	}
}

func testAddressesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Addresses(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAddressesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	addressOne := &Address{}
	addressTwo := &Address{}
	if err = randomize.Struct(seed, addressOne, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}
	if err = randomize.Struct(seed, addressTwo, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = addressTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Addresses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAddressesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	addressOne := &Address{}
	addressTwo := &Address{}
	if err = randomize.Struct(seed, addressOne, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}
	if err = randomize.Struct(seed, addressTwo, addressDBTypes, false, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = addressOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = addressTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func addressBeforeInsertHook(e boil.Executor, o *Address) error {
	*o = Address{}
	return nil
}

func addressAfterInsertHook(e boil.Executor, o *Address) error {
	*o = Address{}
	return nil
}

func addressAfterSelectHook(e boil.Executor, o *Address) error {
	*o = Address{}
	return nil
}

func addressBeforeUpdateHook(e boil.Executor, o *Address) error {
	*o = Address{}
	return nil
}

func addressAfterUpdateHook(e boil.Executor, o *Address) error {
	*o = Address{}
	return nil
}

func addressBeforeDeleteHook(e boil.Executor, o *Address) error {
	*o = Address{}
	return nil
}

func addressAfterDeleteHook(e boil.Executor, o *Address) error {
	*o = Address{}
	return nil
}

func addressBeforeUpsertHook(e boil.Executor, o *Address) error {
	*o = Address{}
	return nil
}

func addressAfterUpsertHook(e boil.Executor, o *Address) error {
	*o = Address{}
	return nil
}

func testAddressesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Address{}
	o := &Address{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, addressDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Address object: %s", err)
	}

	AddAddressHook(boil.BeforeInsertHook, addressBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	addressBeforeInsertHooks = []AddressHook{}

	AddAddressHook(boil.AfterInsertHook, addressAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	addressAfterInsertHooks = []AddressHook{}

	AddAddressHook(boil.AfterSelectHook, addressAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	addressAfterSelectHooks = []AddressHook{}

	AddAddressHook(boil.BeforeUpdateHook, addressBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	addressBeforeUpdateHooks = []AddressHook{}

	AddAddressHook(boil.AfterUpdateHook, addressAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	addressAfterUpdateHooks = []AddressHook{}

	AddAddressHook(boil.BeforeDeleteHook, addressBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	addressBeforeDeleteHooks = []AddressHook{}

	AddAddressHook(boil.AfterDeleteHook, addressAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	addressAfterDeleteHooks = []AddressHook{}

	AddAddressHook(boil.BeforeUpsertHook, addressBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	addressBeforeUpsertHooks = []AddressHook{}

	AddAddressHook(boil.AfterUpsertHook, addressAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	addressAfterUpsertHooks = []AddressHook{}
}
func testAddressesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAddressesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx, addressColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAddressToOneCountryUsingCountry(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Address
	var foreign Country

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, countryDBTypes, true, countryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Country struct: %s", err)
	}

	local.CountryID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.CountryID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Country(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AddressSlice{&local}
	if err = local.L.LoadCountry(tx, false, (*[]*Address)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Country = nil
	if err = local.L.LoadCountry(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Country == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAddressToOneRegionUsingRegion(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Address
	var foreign Region

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, regionDBTypes, true, regionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Region struct: %s", err)
	}

	local.RegionID.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.RegionID.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Region(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AddressSlice{&local}
	if err = local.L.LoadRegion(tx, false, (*[]*Address)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Region == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Region = nil
	if err = local.L.LoadRegion(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Region == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAddressToOneSupplierUsingSupplier(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var local Address
	var foreign Supplier

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, supplierDBTypes, true, supplierColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Supplier struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.SupplierID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.Supplier(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AddressSlice{&local}
	if err = local.L.LoadSupplier(tx, false, (*[]*Address)(&slice)); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Supplier = nil
	if err = local.L.LoadSupplier(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Supplier == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAddressToOneSetOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Country{&b, &c} {
		err = a.SetCountry(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Country != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Addresses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CountryID.Int != x.ID {
			t.Error("foreign key was wrong value", a.CountryID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CountryID.Int))
		reflect.Indirect(reflect.ValueOf(&a.CountryID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CountryID.Int != x.ID {
			t.Error("foreign key was wrong value", a.CountryID.Int, x.ID)
		}
	}
}

func testAddressToOneRemoveOpCountryUsingCountry(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b Country

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, countryDBTypes, false, strmangle.SetComplement(countryPrimaryKeyColumns, countryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCountry(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCountry(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Country(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Country != nil {
		t.Error("R struct entry should be nil")
	}

	if a.CountryID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Addresses) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAddressToOneSetOpRegionUsingRegion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c Region

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Region{&b, &c} {
		err = a.SetRegion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Region != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Addresses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RegionID.Int != x.ID {
			t.Error("foreign key was wrong value", a.RegionID.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RegionID.Int))
		reflect.Indirect(reflect.ValueOf(&a.RegionID.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.RegionID.Int != x.ID {
			t.Error("foreign key was wrong value", a.RegionID.Int, x.ID)
		}
	}
}

func testAddressToOneRemoveOpRegionUsingRegion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b Region

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, regionDBTypes, false, strmangle.SetComplement(regionPrimaryKeyColumns, regionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRegion(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRegion(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Region(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Region != nil {
		t.Error("R struct entry should be nil")
	}

	if a.RegionID.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Addresses) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testAddressToOneSetOpSupplierUsingSupplier(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Address
	var b, c Supplier

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, addressDBTypes, false, strmangle.SetComplement(addressPrimaryKeyColumns, addressColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, supplierDBTypes, false, strmangle.SetComplement(supplierPrimaryKeyColumns, supplierColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Supplier{&b, &c} {
		err = a.SetSupplier(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Supplier != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Addresses[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SupplierID))
		reflect.Indirect(reflect.ValueOf(&a.SupplierID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SupplierID != x.ID {
			t.Error("foreign key was wrong value", a.SupplierID, x.ID)
		}
	}
}
func testAddressesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = address.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAddressesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AddressSlice{address}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testAddressesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Addresses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	addressDBTypes = map[string]string{`City`: `varchar`, `CountryID`: `int`, `ID`: `int`, `Line1`: `varchar`, `Line2`: `varchar`, `Line3`: `varchar`, `Phone`: `varchar`, `Postcode`: `varchar`, `RegionID`: `int`, `SupplierID`: `int`}
	_              = bytes.MinRead
)

func testAddressesUpdate(t *testing.T) {
	t.Parallel()

	if len(addressColumns) == len(addressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err = address.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAddressesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(addressColumns) == len(addressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	address := &Address{}
	if err = randomize.Struct(seed, address, addressDBTypes, true, addressColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, address, addressDBTypes, true, addressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(addressColumns, addressPrimaryKeyColumns) {
		fields = addressColumns
	} else {
		fields = strmangle.SetComplement(
			addressColumns,
			addressPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(address))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AddressSlice{address}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testAddressesUpsert(t *testing.T) {
	t.Parallel()

	if len(addressColumns) == len(addressPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	address := Address{}
	if err = randomize.Struct(seed, &address, addressDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = address.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Address: %s", err)
	}

	count, err := Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &address, addressDBTypes, false, addressPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Address struct: %s", err)
	}

	if err = address.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Address: %s", err)
	}

	count, err = Addresses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
